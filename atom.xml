<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Horn&#39;Page</title>
  
  
  <link href="https://github.com/Elbenhorn/Elbenhorn.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/Elbenhorn/Elbenhorn.github.io/"/>
  <updated>2021-05-15T14:05:48.329Z</updated>
  <id>https://github.com/Elbenhorn/Elbenhorn.github.io/</id>
  
  <author>
    <name>HornDeng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://github.com/Elbenhorn/Elbenhorn.github.io/2021/05/13/%E9%9A%8F%E7%AC%94%E5%91%BD%E4%BB%A4/"/>
    <id>https://github.com/Elbenhorn/Elbenhorn.github.io/2021/05/13/%E9%9A%8F%E7%AC%94%E5%91%BD%E4%BB%A4/</id>
    <published>2021-05-12T18:15:37.485Z</published>
    <updated>2021-05-15T14:05:48.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="conda-Linux指令"><a href="#conda-Linux指令" class="headerlink" title="conda Linux指令"></a>conda Linux指令</h1><p>检查gpu是否可用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.test.is_gpu_available()</span><br></pre></td></tr></table></figure><p>查看可用的tf版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">anaconda search -t conda tensorflow-gpu</span><br></pre></td></tr></table></figure><p>查看进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><h1 id="Tensorflow代码"><a href="#Tensorflow代码" class="headerlink" title="Tensorflow代码"></a>Tensorflow代码</h1><p>接收要保存的初始化参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">checkpoint &#x3D; tf.train.Checkpoint(model&#x3D;model)</span><br><span class="line">manager &#x3D; tf.train.CheckpointManager(checkpoint, directory&#x3D;&#39;.&#x2F;save&#39;, max_to_keep&#x3D;3)</span><br></pre></td></tr></table></figure><p>保存参数，<code>save_path_with_prefix</code> 是保存文件的<strong>目录 + 前缀</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkpoint.save(save_path_with_prefix)</span><br></pre></td></tr></table></figure><h3 id="正态分布tf-truncated-normal-initializer-和tf-random-normal-initializer-，"><a href="#正态分布tf-truncated-normal-initializer-和tf-random-normal-initializer-，" class="headerlink" title="正态分布tf.truncated_normal_initializer()和tf.random_normal_initializer()，"></a>正态分布tf.truncated_normal_initializer()和tf.random_normal_initializer()，</h3><p>前者为从截断的正态分布中输出<strong>随机值</strong>。生成的值服从具有指定平均值和标准偏差的正态分布，如果生成的值大于平均值2个标准偏差的值则丢弃重新选择。<br>在tf.truncated_normal中如果x的取值在区间（μ-2σ，μ+2σ）之外则重新进行选择。这样保证了生成的值都在均值附近。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tf.truncated_normal(shape, mean&#x3D;0.0, stddev&#x3D;1.0, dtype&#x3D;tf.float32, seed&#x3D;None, name&#x3D;None)</span><br><span class="line">tf.random_normal(shape, mean&#x3D;0.0, stddev&#x3D;1.0, dtype&#x3D;tf.float32, seed&#x3D;None, name&#x3D;None)</span><br></pre></td></tr></table></figure><p>参数:</p><ul><li>shape: 一维的张量，也是输出的张量。</li><li>mean: 正态分布的均值。</li><li>stddev: 正态分布的标准差。</li><li>dtype: 输出的类型。</li><li>seed: 一个整数，当设置之后，每次生成的随机数都一样。</li><li>name: 操作的名字。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tf.cast(a,dtype)#数值精度转换或类型转换</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建全0，全1张量"><a href="#创建全0，全1张量" class="headerlink" title="创建全0，全1张量"></a>创建全0，全1张量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tf.zeros(shape)</span><br><span class="line">tf.ones(shape)</span><br><span class="line">tf.zeros_like()</span><br><span class="line">tf.ones_like()</span><br><span class="line">tf.fill(shape,value)#创建形状shape，值value的张量</span><br></pre></td></tr></table></figure><p>正态分布，高斯分布，均匀分布</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tf.random.normal(shape,mean,stddv)</span><br><span class="line">tf.</span><br></pre></td></tr></table></figure><h3 id="tf-ruduce-mean降维或者求均值"><a href="#tf-ruduce-mean降维或者求均值" class="headerlink" title="tf.ruduce_mean降维或者求均值"></a>tf.ruduce_mean降维或者求均值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reduce_mean(input_tensor,</span><br><span class="line">                axis&#x3D;None,</span><br><span class="line">                keep_dims&#x3D;False,</span><br><span class="line">                name&#x3D;None,</span><br><span class="line">                reduction_indices&#x3D;None)</span><br></pre></td></tr></table></figure><ul><li>第一个参数input_tensor： 输入的待降维的tensor;</li><li>第二个参数axis： 指定的轴，如果不指定，则计算所有元素的均值;</li><li>第三个参数keep_dims：是否降维度，设置为True，输出的结果保持输入tensor的形状，设置为False，输出结果会降低维度;</li><li>第四个参数name： 操作的名称;</li></ul><h3 id="tf-one-hot-独热编码"><a href="#tf-one-hot-独热编码" class="headerlink" title="tf.one_hot()独热编码"></a>tf.one_hot()独热编码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">one_hot(</span><br><span class="line">    indices,        #输入的tensor，在深度学习中一般是给定的labels，通常是数字列表，属于一维输入，也可以是多维。</span><br><span class="line">    depth,          #一个标量，用于定义一个 one hot 维度的深度</span><br><span class="line">    on_value&#x3D;None,  #定义在 indices[j] &#x3D; i 时填充输出的值的标量，默认为1</span><br><span class="line">    off_value&#x3D;None, #定义在 indices[j] !&#x3D; i 时填充输出的值的标量，默认为0</span><br><span class="line">    axis&#x3D;None,      #要填充的轴，默认为-1，即一个新的最内层轴</span><br><span class="line">    dtype&#x3D;None,     </span><br><span class="line">    name&#x3D;None</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="tf训练结构"><a href="#tf训练结构" class="headerlink" title="tf训练结构"></a>tf训练结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># &quot;&quot;&quot;&#39;</span><br><span class="line"># &quot;&quot;&quot;</span><br><span class="line"># import tensorflow as tf</span><br><span class="line"># def model():</span><br><span class="line">#     #参数</span><br><span class="line"># </span><br><span class="line"># def main():</span><br><span class="line">#     @tf.function</span><br><span class="line">#     def trian_step():</span><br><span class="line">#         with tf.GradientTape(persistent&#x3D;True) as gen_tape, tf.GradientTape(</span><br><span class="line">#                 persistent&#x3D;True) as disc_tape:</span><br><span class="line">#             #将损失函数loss用带训练的model表示</span><br><span class="line">#         grad &#x3D; gen_tape.gradient(loss,model.trainable_variables)#前者为损失函数，后者为待优化参数</span><br><span class="line">#         optimizer.apply_gradients(zip(grad,model.trainable_variables))</span><br><span class="line">#     optimizer &#x3D; tf.keras.optimizers.Adam(2e-4, beta_1&#x3D;0.5)#定义优化器</span><br><span class="line">#     </span><br><span class="line">#     ckpt &#x3D; tf.train.Checkpoint(model&#x3D;model,)</span><br><span class="line">#     ckpt_manager &#x3D; tf.train.CheckpointManager(ckpt, checkpoint_path, max_to_keep&#x3D;5)</span><br><span class="line"># </span><br><span class="line">#     # if a checkpoint exists, restore the latest checkpoint.</span><br><span class="line">#     if ckpt_manager.latest_checkpoint:</span><br><span class="line">#         ckpt.restore(ckpt_manager.latest_checkpoint)</span><br><span class="line">#         print(&#39;Latest checkpoint restored!!&#39;)</span><br><span class="line"># </span><br><span class="line">#     for epoch in range(epochs):</span><br><span class="line">#         trian_step()</span><br><span class="line">#         if (epoch + 1) % 10 &#x3D;&#x3D; 0:</span><br><span class="line">#             ckpt_save_path &#x3D; ckpt_manager.save()</span><br><span class="line">#             print(&#39;Saving checkpoint for epoch &#123;&#125; at &#123;&#125;&#39;.format(epoch + 1, ckpt_save_path))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;conda-Linux指令&quot;&gt;&lt;a href=&quot;#conda-Linux指令&quot; class=&quot;headerlink&quot; title=&quot;conda Linux指令&quot;&gt;&lt;/a&gt;conda Linux指令&lt;/h1&gt;&lt;p&gt;检查gpu是否可用：&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DCGAN学习</title>
    <link href="https://github.com/Elbenhorn/Elbenhorn.github.io/2021/05/10/DCGAN%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/Elbenhorn/Elbenhorn.github.io/2021/05/10/DCGAN%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-05-10T04:21:55.000Z</published>
    <updated>2021-05-10T05:00:21.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DCGAN原理"><a href="#DCGAN原理" class="headerlink" title="DCGAN原理"></a>DCGAN原理</h1><p>DCGAN将卷积网络运用到传统的GAN中，相比于传统网络结构，DCGAN进行了如下提升</p><ul><li>利用CNN有效提取图像特征更有利于训练</li></ul><p>对于网络结构</p><ul><li>取消pooling层，生成器用反卷积进行上采样，鉴别器则用strided convolutions替代</li><li>对隐藏层也采用BN</li><li>去掉去掉全连接层</li><li>G采用ReLu激活函数</li></ul><p><img src="http://horndeng.oss-cn-hangzhou.aliyuncs.com/img/image-20210510123031155.png" alt="image-20210510123031155"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码来源于<a href="https://github.com/MINGUKKANG/DCGAN-tensor">https://github.com/MINGUKKANG/DCGAN-tensor</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line">from PIL import Image  # Image 用于读取影像  </span><br><span class="line">from skimage import io  # io也可用于读取影响，效果比Image读取的更好一些</span><br><span class="line"></span><br><span class="line">import tensorflow.compat.v1 as tf  # 用于构建神经网络模型</span><br><span class="line">import matplotlib.pyplot as plt  # 用于绘制生成影像的结果</span><br><span class="line">import numpy as np  # 读取影像</span><br><span class="line">import os  # 文件夹操作</span><br><span class="line">import time  # 计时</span><br><span class="line">tf.compat.v1.disable_eager_execution()</span><br><span class="line"># 设置相关参数</span><br><span class="line">is_training &#x3D; True</span><br><span class="line">input_dir &#x3D; &quot;.&#x2F;face&#x2F;&quot;  # 原始数据的文件夹路径</span><br><span class="line"></span><br><span class="line"># 设置超参数 hyper parameters</span><br><span class="line">batch_size &#x3D; 64</span><br><span class="line">image_width &#x3D; 64</span><br><span class="line">image_height &#x3D; 64</span><br><span class="line">image_channel &#x3D; 3</span><br><span class="line">data_shape &#x3D; [64, 64, 3]</span><br><span class="line">data_length &#x3D; 64 * 64 * 3</span><br><span class="line"></span><br><span class="line">z_dim &#x3D; 100</span><br><span class="line">learning_rate &#x3D; 0.00005</span><br><span class="line">beta1 &#x3D; 0.5</span><br><span class="line">epoch &#x3D; 500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def prepare_data(input_dir, floder):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    函数功能：通过输入图像的路径，读取训练数据 </span><br><span class="line">    :参数 input_dir: 图像数据所在的根目录，即&quot;.&#x2F;face&quot; </span><br><span class="line">    :参数 floder: 图像数据所在的子目录, 即&quot;.&#x2F;face&#x2F;A&quot; </span><br><span class="line">    :return: 返回读取好的训练数据</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">    # 遍历图像路径，并获取图像数量</span><br><span class="line">    images &#x3D; os.listdir(input_dir + floder)</span><br><span class="line">    image_len &#x3D; len(images)</span><br><span class="line"></span><br><span class="line">    # 设置一个空data，用于存放数据</span><br><span class="line">    data &#x3D; np.empty((image_len, image_width, image_height, image_channel), dtype&#x3D;&quot;float32&quot;)</span><br><span class="line"></span><br><span class="line">    # 逐个图像读取</span><br><span class="line">    for i in range(image_len):</span><br><span class="line">        # 如果导入的是skimage.io，则读取影像应该写为img &#x3D; io.imread(input_dir + images[i])</span><br><span class="line">        img &#x3D; Image.open(input_dir + floder + &quot;&#x2F;&quot; + images[i])  # 打开图像</span><br><span class="line">        img &#x3D; img.resize((image_width, image_height))  # 将256*256变成64*64</span><br><span class="line">        arr &#x3D; np.asarray(img, dtype&#x3D;&quot;float32&quot;)  # 将格式改为np.array</span><br><span class="line">        data[i, :, :, :] &#x3D; arr  # 将其放入data中</span><br><span class="line"></span><br><span class="line">    sess &#x3D; tf.Session()</span><br><span class="line">    sess.run(tf.initialize_all_variables())</span><br><span class="line">    data &#x3D; tf.reshape(data, [-1, image_width, image_height, image_channel])</span><br><span class="line">    train_data &#x3D; data * 1.0 &#x2F; 127.5 - 1.0  # 对data进行正则化</span><br><span class="line">    train_data &#x3D; tf.reshape(train_data, [-1, data_length])  # 将其拉伸成一维向量</span><br><span class="line">    train_set &#x3D; sess.run(train_data)</span><br><span class="line">    sess.close()</span><br><span class="line">    return train_set</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def plot_and_save(order, images):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    函数功能：绘制生成器的结果，并保存</span><br><span class="line">    :param order:</span><br><span class="line">    :param images:</span><br><span class="line">    :return:</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">    # 将一个batch_size的所有图像进行保存</span><br><span class="line">    batch_size &#x3D; len(images)</span><br><span class="line">    n &#x3D; np.int(np.sqrt(batch_size))</span><br><span class="line"></span><br><span class="line">    # 读取图像大小，并生成掩模canvas</span><br><span class="line">    image_size &#x3D; np.shape(images)[2]</span><br><span class="line">    n_channel &#x3D; np.shape(images)[3]</span><br><span class="line">    images &#x3D; np.reshape(images, [-1, image_size, image_size, n_channel])</span><br><span class="line">    canvas &#x3D; np.empty((n * image_size, n * image_size, image_channel))</span><br><span class="line"></span><br><span class="line">    # 为每个掩模赋值</span><br><span class="line">    for i in range(n):</span><br><span class="line">        for j in range(n):</span><br><span class="line">            canvas[i * image_size:(i + 1) * image_size, j * image_size:(j + 1) * image_size, :] &#x3D; images[</span><br><span class="line">                n * i + j].reshape(64, 64, 3)</span><br><span class="line"></span><br><span class="line">    # 绘制结果，并设置坐标轴</span><br><span class="line">    plt.figure(figsize&#x3D;(8, 8))</span><br><span class="line">    plt.imshow(canvas, cmap&#x3D;&quot;gray&quot;)</span><br><span class="line">    label &#x3D; &quot;Epoch: &#123;0&#125;&quot;.format(order + 1)</span><br><span class="line">    plt.xlabel(label)</span><br><span class="line"></span><br><span class="line">    # 为每个文件命名</span><br><span class="line">    if type(order) is str:</span><br><span class="line">        file_name &#x3D; order</span><br><span class="line">    else:</span><br><span class="line">        file_name &#x3D; &quot;face_gen&quot; + str(order)</span><br><span class="line"></span><br><span class="line">    # 保存绘制的结果</span><br><span class="line">    plt.savefig(file_name)</span><br><span class="line">    print(os.getcwd())</span><br><span class="line">    print(&quot;Image saved in file: &quot;, file_name)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def Generator(z, is_training, reuse):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    函数功能：输入噪声z，生成图像gen_img</span><br><span class="line">    :param z:即输入数据，一般为噪声</span><br><span class="line">    :param is_training:是否为训练环节</span><br><span class="line">    :return: 返回生成影像gen_img</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">    # 图像的channel维度变化为1-&gt;1024-&gt;512-&gt;256-&gt;128-&gt;3</span><br><span class="line">    depths &#x3D; [1024, 512, 256, 128] + [data_shape[2]]</span><br><span class="line"></span><br><span class="line">    with tf.variable_scope(&quot;Generator&quot;, reuse&#x3D;reuse):</span><br><span class="line">        # 第一层全连接层</span><br><span class="line">        with tf.variable_scope(&quot;g_fc1&quot;, reuse&#x3D;reuse):</span><br><span class="line">            output &#x3D; tf.layers.dense(z, depths[0] * 4 * 4, trainable&#x3D;is_training)</span><br><span class="line">            output &#x3D; tf.reshape(output, [batch_size, 4, 4, depths[0]])</span><br><span class="line">            output &#x3D; tf.nn.relu(tf.layers.batch_normalization(output, training&#x3D;is_training))</span><br><span class="line"></span><br><span class="line">        # 第二层反卷积层1024</span><br><span class="line">        with tf.variable_scope(&quot;g_dc1&quot;, reuse&#x3D;reuse):</span><br><span class="line">            output &#x3D; tf.layers.conv2d_transpose(output, depths[1], [5, 5], strides&#x3D;(2, 2),</span><br><span class="line">                                                padding&#x3D;&quot;SAME&quot;, trainable&#x3D;is_training)</span><br><span class="line">            output &#x3D; tf.nn.relu(tf.layers.batch_normalization(output, training&#x3D;is_training))</span><br><span class="line"></span><br><span class="line">        # 第三层反卷积层512</span><br><span class="line">        with tf.variable_scope(&quot;g_dc2&quot;, reuse&#x3D;reuse):</span><br><span class="line">            output &#x3D; tf.layers.conv2d_transpose(output, depths[2], [5, 5], strides&#x3D;(2, 2),</span><br><span class="line">                                                padding&#x3D;&quot;SAME&quot;, trainable&#x3D;is_training)</span><br><span class="line">            output &#x3D; tf.nn.relu(tf.layers.batch_normalization(output, training&#x3D;is_training))</span><br><span class="line"></span><br><span class="line">        # 第四层反卷积层256</span><br><span class="line">        with tf.variable_scope(&quot;g_dc3&quot;, reuse&#x3D;reuse):</span><br><span class="line">            output &#x3D; tf.layers.conv2d_transpose(output, depths[3], [5, 5], strides&#x3D;(2, 2),</span><br><span class="line">                                                padding&#x3D;&quot;SAME&quot;, trainable&#x3D;is_training)</span><br><span class="line">            output &#x3D; tf.nn.relu(tf.layers.batch_normalization(output, training&#x3D;is_training))</span><br><span class="line"></span><br><span class="line">        # 第五层反卷积层128</span><br><span class="line">        with tf.variable_scope(&quot;g_dc4&quot;, reuse&#x3D;reuse):</span><br><span class="line">            output &#x3D; tf.layers.conv2d_transpose(output, depths[4], [5, 5], strides&#x3D;(2, 2),</span><br><span class="line">                                                padding&#x3D;&quot;SAME&quot;, trainable&#x3D;is_training)</span><br><span class="line">            gen_img &#x3D; tf.nn.tanh(output)</span><br><span class="line"></span><br><span class="line">    return gen_img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义判别器</span><br><span class="line">def Discriminator(x, is_training, reuse):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    函数功能：判别输入的图像是真或假</span><br><span class="line">    :param x: 输入数据</span><br><span class="line">    :param is_training: 是否为训练环节</span><br><span class="line">    :return: 判别结果</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">    # channel维度变化为：3-&gt;64-&gt;128-&gt;256-&gt;512</span><br><span class="line">    depths &#x3D; [data_shape[2]] + [64, 128, 256, 512]</span><br><span class="line"></span><br><span class="line">    with tf.variable_scope(&quot;Discriminator&quot;, reuse&#x3D;reuse):</span><br><span class="line">        # 第一层卷积层，注意用的是leaky_relu函数</span><br><span class="line">        with tf.variable_scope(&quot;d_cv1&quot;, reuse&#x3D;reuse):</span><br><span class="line">            output &#x3D; tf.layers.conv2d(x, depths[1], [5, 5], strides&#x3D;(2, 2),</span><br><span class="line">                                      padding&#x3D;&quot;SAME&quot;, trainable&#x3D;is_training)</span><br><span class="line">            output &#x3D; tf.nn.leaky_relu(tf.layers.batch_normalization(output, training&#x3D;is_training))</span><br><span class="line"></span><br><span class="line">        # 第二层卷积层，注意用的是leaky_relu函数</span><br><span class="line">        with tf.variable_scope(&quot;d_cv2&quot;, reuse&#x3D;reuse):</span><br><span class="line">            output &#x3D; tf.layers.conv2d(output, depths[2], [5, 5], strides&#x3D;(2, 2),</span><br><span class="line">                                      padding&#x3D;&quot;SAME&quot;, trainable&#x3D;is_training)</span><br><span class="line">            output &#x3D; tf.nn.leaky_relu(tf.layers.batch_normalization(output, training&#x3D;is_training))</span><br><span class="line"></span><br><span class="line">        # 第三层卷积层，注意用的是leaky_relu函数</span><br><span class="line">        with tf.variable_scope(&quot;d_cv3&quot;, reuse&#x3D;reuse):</span><br><span class="line">            output &#x3D; tf.layers.conv2d(output, depths[3], [5, 5], strides&#x3D;(2, 2),</span><br><span class="line">                                      padding&#x3D;&quot;SAME&quot;, trainable&#x3D;is_training)</span><br><span class="line">            output &#x3D; tf.nn.leaky_relu(tf.layers.batch_normalization(output, training&#x3D;is_training))</span><br><span class="line"></span><br><span class="line">        # 第四层卷积层，注意用的是leaky_relu函数</span><br><span class="line">        with tf.variable_scope(&quot;d_cv4&quot;, reuse&#x3D;reuse):</span><br><span class="line">            output &#x3D; tf.layers.conv2d(output, depths[4], [5, 5], strides&#x3D;(2, 2),</span><br><span class="line">                                      padding&#x3D;&quot;SAME&quot;, trainable&#x3D;is_training)</span><br><span class="line">            output &#x3D; tf.nn.leaky_relu(tf.layers.batch_normalization(output, training&#x3D;is_training))</span><br><span class="line"></span><br><span class="line">        # 第五层全链接层</span><br><span class="line">        with tf.variable_scope(&quot;d_fc1&quot;, reuse&#x3D;reuse):</span><br><span class="line">            output &#x3D; tf.layers.flatten(output)</span><br><span class="line">            disc_img &#x3D; tf.layers.dense(output, 1, trainable&#x3D;is_training)</span><br><span class="line"></span><br><span class="line">    return disc_img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义训练过程</span><br><span class="line">def training():</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    函数功能：实现DCGAN的训练过程</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    # 准备数据。这里输入根目录，以A的影像为例进行图像生成</span><br><span class="line">    data &#x3D; prepare_data(input_dir, &quot;A&quot;)</span><br><span class="line"></span><br><span class="line">    # 构建网络结构，这是程序的核心部分---------------------------------------------</span><br><span class="line">    x &#x3D; tf.placeholder(tf.float32, shape&#x3D;[None, data_length], name&#x3D;&quot;Input_data&quot;)</span><br><span class="line">    x_img &#x3D; tf.reshape(x, [-1] + data_shape)</span><br><span class="line">    z &#x3D; tf.placeholder(tf.float32, shape&#x3D;[None, z_dim], name&#x3D;&quot;latent_var&quot;)</span><br><span class="line"></span><br><span class="line">    G &#x3D; Generator(z, is_training&#x3D;True, reuse&#x3D;False)</span><br><span class="line">    D_fake_logits &#x3D; Discriminator(G, is_training&#x3D;True, reuse&#x3D;False)</span><br><span class="line">    D_true_logits &#x3D; Discriminator(x_img, is_training&#x3D;True, reuse&#x3D;True)</span><br><span class="line"></span><br><span class="line">    # 定义生成器的损失函数G_loss</span><br><span class="line">    G_loss &#x3D; tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(</span><br><span class="line">        logits&#x3D;D_fake_logits, labels&#x3D;tf.ones_like(D_fake_logits)))</span><br><span class="line"></span><br><span class="line">    # 定义判别器的损失函数D_loss</span><br><span class="line">    D_loss_1 &#x3D; tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(</span><br><span class="line">        logits&#x3D;D_true_logits, labels&#x3D;tf.ones_like(D_true_logits)))</span><br><span class="line">    D_loss_2 &#x3D; tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(</span><br><span class="line">        logits&#x3D;D_fake_logits, labels&#x3D;tf.zeros_like(D_fake_logits)))</span><br><span class="line">    D_loss &#x3D; D_loss_1 + D_loss_2</span><br><span class="line"></span><br><span class="line">    # 定义方差</span><br><span class="line">    total_vars &#x3D; tf.trainable_variables()</span><br><span class="line">    d_vars &#x3D; [var for var in total_vars if &quot;d_&quot; in var.name]</span><br><span class="line">    g_vars &#x3D; [var for var in total_vars if &quot;g_&quot; in var.name]</span><br><span class="line"></span><br><span class="line">    # 定义优化方式</span><br><span class="line">    with tf.control_dependencies(tf.get_collection(tf.GraphKeys.UPDATE_OPS)):</span><br><span class="line">        g_optimization &#x3D; tf.train.AdamOptimizer(learning_rate&#x3D;learning_rate,</span><br><span class="line">                                                beta1&#x3D;beta1).minimize(G_loss, var_list&#x3D;g_vars)</span><br><span class="line">        d_optimization &#x3D; tf.train.AdamOptimizer(learning_rate&#x3D;learning_rate,</span><br><span class="line">                                                beta1&#x3D;beta1).minimize(D_loss, var_list&#x3D;d_vars)</span><br><span class="line">    print(&quot;we successfully make the network&quot;)</span><br><span class="line">    # 网络模型构建结束------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    # 训练模型初始化</span><br><span class="line">    start_time &#x3D; time.time()  # 计时</span><br><span class="line">    sess &#x3D; tf.Session()</span><br><span class="line">    sess.run(tf.initialize_all_variables())</span><br><span class="line"></span><br><span class="line">    # 逐个epoch训练</span><br><span class="line">    for i in range(epoch):</span><br><span class="line">        total_batch &#x3D; int(len(data) &#x2F; batch_size)</span><br><span class="line">        d_value &#x3D; 0</span><br><span class="line">        g_value &#x3D; 0</span><br><span class="line">        # 逐个batch训练</span><br><span class="line">        for j in range(total_batch):</span><br><span class="line">            batch_xs &#x3D; data[j * batch_size:j * batch_size + batch_size]</span><br><span class="line"></span><br><span class="line">            # 训练判别器</span><br><span class="line">            z_sampled1 &#x3D; np.random.uniform(low&#x3D;-1.0, high&#x3D;1.0, size&#x3D;[batch_size, z_dim])</span><br><span class="line">            Op_d, d_ &#x3D; sess.run([d_optimization, D_loss], feed_dict&#x3D;&#123;x: batch_xs, z: z_sampled1&#125;)</span><br><span class="line"></span><br><span class="line">            # 训练生成器</span><br><span class="line">            z_sampled2 &#x3D; np.random.uniform(low&#x3D;-1.0, high&#x3D;1.0, size&#x3D;[batch_size, z_dim])</span><br><span class="line">            Op_g, g_ &#x3D; sess.run([g_optimization, G_loss], feed_dict&#x3D;&#123;x: batch_xs, z: z_sampled2&#125;)</span><br><span class="line"></span><br><span class="line">            # 尝试生成影像并保存</span><br><span class="line">            images_generated &#x3D; sess.run(G, feed_dict&#x3D;&#123;z: z_sampled2&#125;)</span><br><span class="line">            d_value +&#x3D; d_ &#x2F; total_batch</span><br><span class="line">            g_value +&#x3D; g_ &#x2F; total_batch</span><br><span class="line">            plot_and_save(i, images_generated)</span><br><span class="line"></span><br><span class="line">            # 输出时间和损失函数loss</span><br><span class="line">            hour &#x3D; int((time.time() - start_time) &#x2F; 3600)</span><br><span class="line">            min &#x3D; int(((time.time() - start_time) - 3600 * hour) &#x2F; 60)</span><br><span class="line">            sec &#x3D; int((time.time() - start_time) - 3600 * hour - 60 * min)</span><br><span class="line">            print(&quot;Time: &quot;, hour, &quot;h&quot;, min, &quot;min&quot;, sec, &quot;sec&quot;, &quot;   Epoch: &quot;,</span><br><span class="line">                  i, &quot;G_loss: &quot;, g_value, &quot;D_loss: &quot;, d_value)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    training()</span><br></pre></td></tr></table></figure><p>#训练结果</p><p><img src="http://horndeng.oss-cn-hangzhou.aliyuncs.com/img/face_gen0.png" alt="face_gen0"></p><p><img src="http://horndeng.oss-cn-hangzhou.aliyuncs.com/img/face_gen67.png" alt="face_gen67"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DCGAN原理&quot;&gt;&lt;a href=&quot;#DCGAN原理&quot; class=&quot;headerlink&quot; title=&quot;DCGAN原理&quot;&gt;&lt;/a&gt;DCGAN原理&lt;/h1&gt;&lt;p&gt;DCGAN将卷积网络运用到传统的GAN中，相比于传统网络结构，DCGAN进行了如下提升&lt;/p&gt;
&lt;u</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://github.com/Elbenhorn/Elbenhorn.github.io/2021/04/02/BUG-%E5%90%88%E9%9B%86/"/>
    <id>https://github.com/Elbenhorn/Elbenhorn.github.io/2021/04/02/BUG-%E5%90%88%E9%9B%86/</id>
    <published>2021-04-02T13:46:14.024Z</published>
    <updated>2021-04-02T14:04:18.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Question-Content"><a href="#Question-Content" class="headerlink" title="Question Content"></a>Question Content</h1><p><a href="#jump1">question1</a></p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p><span id="jump1">test</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Question-Content&quot;&gt;&lt;a href=&quot;#Question-Content&quot; class=&quot;headerlink&quot; title=&quot;Question Content&quot;&gt;&lt;/a&gt;Question Content&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;#jump</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>大作业：求凸包面积</title>
    <link href="https://github.com/Elbenhorn/Elbenhorn.github.io/2021/02/02/%E5%A4%A7%E4%BD%9C%E4%B8%9A%EF%BC%9A%E6%B1%82%E5%87%B8%E5%8C%85%E9%9D%A2%E7%A7%AF/"/>
    <id>https://github.com/Elbenhorn/Elbenhorn.github.io/2021/02/02/%E5%A4%A7%E4%BD%9C%E4%B8%9A%EF%BC%9A%E6%B1%82%E5%87%B8%E5%8C%85%E9%9D%A2%E7%A7%AF/</id>
    <published>2021-02-02T07:51:18.000Z</published>
    <updated>2021-02-02T08:54:58.514Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基于蒙特卡洛算法和Graham扫描法计算包含随机点集的最大凸多边形图形面积"><a href="#基于蒙特卡洛算法和Graham扫描法计算包含随机点集的最大凸多边形图形面积" class="headerlink" title="基于蒙特卡洛算法和Graham扫描法计算包含随机点集的最大凸多边形图形面积"></a>基于蒙特卡洛算法和Graham扫描法计算包含随机点集的最大凸多边形图形面积</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定任意点的坐标，绘制包含这些点的最大凸多边形，并计算该多边形的面积。  </p><h3 id="凸包算法（Graham扫描法）"><a href="#凸包算法（Graham扫描法）" class="headerlink" title="凸包算法（Graham扫描法）"></a>凸包算法（Graham扫描法）</h3><ol><li><p>找出点集p[]中最左下的点p1，把p1同点集中其他各点用线段连接，并计算这些线段与水平线的夹角，然后按夹角从小到大和按到p1的距离从近到远排序(夹角范围为 [0, 180)度，而且可以删除相同夹角且距离p1较近的点，保留最远点，这样可减少计算量。因为直线上的非端点不是凸包的极点，即如果p1,p2,p3在一条直线上，则只取凸点p1,p3。p2不在端点，故可以去掉)，得到新的节点序列p1,p2,…pn.依次连接这些点，得到一个多边形(已经逆时针，有所进展，但还需去掉不在凸包上的点)。此时p1是凸包的边界起点，p2和pn也是最终凸包的顶点，p[n+1]=p1(看成循环的)  </p></li><li><p>删除p3,p4,…p[n-1]中不在凸包上的点：</p><p>先把p1,p2,p3入栈S中，再依次循环(i = 3 -&gt; n-1)，若栈顶的两个点和当前的点p[i]这三点连线的方向向顺时针方向偏转，表明是凹的，应删除，则栈顶元素出栈(要循环判断，即可能前面的仍是凹的，还需再出栈，举例如下图)，直到向逆时针方向偏转或者栈内只有2个元素了(p1p2)，就把当前点p[i]入栈。</p><p>最后栈中的元素就是最终凸包上的点。</p></li></ol><p><img src="http://horndeng.oss-cn-hangzhou.aliyuncs.com/img/image-20210202160324357.png" alt="image-20210202160324357"></p><h2 id="实现方法详述"><a href="#实现方法详述" class="headerlink" title="实现方法详述"></a>实现方法详述</h2><ol><li><p>寻找凸包：对于任意点的坐标绘制凸多边形，采用经典的凸包算法：Graham扫描法，编写程序使用python语言。先利用random模块生成1000个随机坐标点集，将这些点集绘制成散点图如下：<img src="http://horndeng.oss-cn-hangzhou.aliyuncs.com/img/image-20210202160623662.png" alt="image-20210202160623662"></p><p>​                                                                    图一：散点图</p><p>​    再按照Graham扫描法的原理：先从随机点中找出位于最左下方的基准点，获取P中其他坐标    点与基准点的极角，并对其进行排序，得到按极角逆时针排序点集p_sort。创建贮存凸点的    栈p_result，先把基准点pk和p_sort[0]入栈S中，再依次循环p_sort中的元素p_sort[i]，若栈    顶的两个点和当前的点p_sort[i]这三点连线的方向向顺时针方向偏转，表明是凹的，应删        除，则栈顶元素出栈(采用while循环判断，因为可能前面的仍是凹的，还需再出栈。)，直    到向逆时针方向偏转或者栈内只有2个元素了(p1p2)，就把当前点p_sort[i]入栈。最后得到凸    多边形点集result。利用python画出该凸多边形如下；</p><p><img src="http://horndeng.oss-cn-hangzhou.aliyuncs.com/img/wps1.jpg" alt="img">                                                            图二、最大凸多边形</p><ol start="2"><li>计算最大凸多边形面积，先在(0,sample)范围内随机生成precision个坐标点，用射线法判断这些点是否在凸多边形内，统计在多边形内的点的个数number，利用如下公式即可算出面积area</li></ol></li></ol><h2 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a>程序代码</h2><figure class="highlight plain"><figcaption><span>math</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">import time</span><br><span class="line">import random</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"> </span><br><span class="line">#随机生成数组的函数</span><br><span class="line">import random</span><br><span class="line">def random_int_list(start, stop, length):</span><br><span class="line">    start, stop &#x3D; (int(start), int(stop)) if start &lt;&#x3D; stop else (int(stop), int(start))</span><br><span class="line">    length &#x3D; int(abs(length)) if length else 0</span><br><span class="line">    random_list &#x3D; []</span><br><span class="line">    for i in range(length):</span><br><span class="line">        random_list.append(random.randint(start, stop))</span><br><span class="line">    return random_list</span><br><span class="line"> </span><br><span class="line">#获取基准点的下标,基准点是p[k]</span><br><span class="line">def get_leftbottompoint(p):</span><br><span class="line">    k &#x3D; 0</span><br><span class="line">    for i in range(1, len(p)):</span><br><span class="line">        if p[i][1] &lt; p[k][1] or (p[i][1] &#x3D;&#x3D; p[k][1] and p[i][0] &lt; p[k][0]):</span><br><span class="line">            k &#x3D; i</span><br><span class="line">    return k</span><br><span class="line"> </span><br><span class="line">#叉乘计算方法</span><br><span class="line">def multiply(p1, p2, p0):</span><br><span class="line">    return (p1[0] - p0[0]) * (p2[1] - p0[1]) - (p2[0] - p0[0]) * (p1[1] - p0[1])</span><br><span class="line"> </span><br><span class="line">#获取极角，通过求反正切得出，考虑pi&#x2F;2的情况</span><br><span class="line">def get_arc(p1, p0):</span><br><span class="line">    # 兼容sort_points_tan的考虑</span><br><span class="line">    if (p1[0] - p0[0]) &#x3D;&#x3D; 0:</span><br><span class="line">        if ((p1[1] - p0[1])) &#x3D;&#x3D; 0:</span><br><span class="line">            return -1;</span><br><span class="line">        else:</span><br><span class="line">            return math.pi &#x2F; 2</span><br><span class="line">    tan &#x3D; float((p1[1] - p0[1])) &#x2F; float((p1[0] - p0[0]))</span><br><span class="line">    arc &#x3D; math.atan(tan)</span><br><span class="line">    if arc &gt;&#x3D; 0:</span><br><span class="line">        return arc</span><br><span class="line">    else:</span><br><span class="line">        return math.pi + arc</span><br><span class="line">    </span><br><span class="line">#对极角进行排序,排序结果list不包含基准点</span><br><span class="line">def sort_points_tan(p, pk):</span><br><span class="line">    p2 &#x3D; []</span><br><span class="line">    for i in range(0, len(p)):</span><br><span class="line">        p2.append(&#123;&quot;index&quot;: i, &quot;arc&quot;: get_arc(p[i], pk)&#125;)</span><br><span class="line">    #print(&#39;排序前:&#39;,p2)</span><br><span class="line">    p2.sort(key&#x3D;lambda k: (k.get(&#39;arc&#39;)))</span><br><span class="line">    #print(&#39;排序后:&#39;,p2)</span><br><span class="line">    p_out &#x3D; []</span><br><span class="line">    for i in range(0, len(p2)):</span><br><span class="line">        p_out.append(p[p2[i][&quot;index&quot;]])</span><br><span class="line">    return p_out</span><br><span class="line">#求凸多边形顶点</span><br><span class="line">def convex_hull(p):</span><br><span class="line">    p&#x3D;list(set(p))#去重</span><br><span class="line">    k &#x3D; get_leftbottompoint(p)#获取基准点下标</span><br><span class="line">    pk &#x3D; p[k]</span><br><span class="line">    p.remove(p[k])</span><br><span class="line">    #print(&#39;排序前去除基准点的所有点:&#39;,p,&#39;基准点:&#39;,pk)</span><br><span class="line"> </span><br><span class="line">    p_sort &#x3D; sort_points_tan(p, pk)   #按与基准点连线和x轴正向的夹角排序后的点坐标</span><br><span class="line">    p_result &#x3D; [pk,p_sort[0]]</span><br><span class="line"> </span><br><span class="line">    top &#x3D; 2</span><br><span class="line">    for i in range(1, len(p_sort)):</span><br><span class="line">        #叉乘为正,向前递归删点;叉乘为负,序列追加新点</span><br><span class="line">        while(multiply(p_result[-2], p_sort[i],p_result[-1]) &gt; 0):</span><br><span class="line">            p_result.pop()</span><br><span class="line">        #叉乘为负,序列追加新点</span><br><span class="line">        p_result.append(p_sort[i])    </span><br><span class="line">    return p_result</span><br><span class="line"> </span><br><span class="line">#判断点是否在凸多边形内</span><br><span class="line">def is_in_poly(p, poly):</span><br><span class="line">    px, py &#x3D; p</span><br><span class="line">    is_in &#x3D; False</span><br><span class="line">    for i, corner in enumerate(poly):</span><br><span class="line">        next_i &#x3D; i + 1 if i + 1 &lt; len(poly) else 0</span><br><span class="line">        x1, y1 &#x3D; corner</span><br><span class="line">        x2, y2 &#x3D; poly[next_i]</span><br><span class="line">        if (x1 &#x3D;&#x3D; px and y1 &#x3D;&#x3D; py) or (x2 &#x3D;&#x3D; px and y2 &#x3D;&#x3D; py):  # if point is on vertex</span><br><span class="line">            is_in &#x3D; True</span><br><span class="line">            break</span><br><span class="line">        if min(y1, y2) &lt; py &lt;&#x3D; max(y1, y2):  # find horizontal edges of polygon</span><br><span class="line">            x &#x3D; x1 + (py - y1) * (x2 - x1) &#x2F; (y2 - y1)</span><br><span class="line">            if x &#x3D;&#x3D; px:  # if point is on edge</span><br><span class="line">                is_in &#x3D; True</span><br><span class="line">                break</span><br><span class="line">            elif x &gt; px:  # if point is on left-side of line</span><br><span class="line">                is_in &#x3D; not is_in</span><br><span class="line">    return is_in</span><br><span class="line">#蒙特卡洛算法</span><br><span class="line">def mengtekaluo(points,precision):</span><br><span class="line">    pointss&#x3D;[]</span><br><span class="line">    x &#x3D; random_int_list(0, 1000,precision )</span><br><span class="line"> </span><br><span class="line">    y &#x3D; random_int_list(0, 1000, precision)</span><br><span class="line">    for index in range(len(x)):</span><br><span class="line">        pointss.append((x[index], y[index]))</span><br><span class="line">    number&#x3D;0</span><br><span class="line">    for i in range(0,len(pointss)):</span><br><span class="line">        if is_in_poly(pointss[i], result):</span><br><span class="line">            number+&#x3D;1</span><br><span class="line">    area&#x3D;1000000*number&#x2F;int(precision)</span><br><span class="line">return area</span><br><span class="line"></span><br><span class="line">points&#x3D;[]</span><br><span class="line">x &#x3D; random_int_list(1, 1000, 100) </span><br><span class="line">y &#x3D; random_int_list(1, 1000, 100)</span><br><span class="line">for index in range(len(x)):</span><br><span class="line">    points.append((x[index], y[index]))</span><br><span class="line">test_data &#x3D; points</span><br><span class="line">result &#x3D;convex_hull(test_data)</span><br><span class="line">area &#x3D; GetAreaOfPolyGonbyVector(result)</span><br><span class="line">print(area)</span><br><span class="line"></span><br><span class="line">xx&#x3D;[]</span><br><span class="line">yy&#x3D;[]</span><br><span class="line">for i in range(len(result)):</span><br><span class="line">    xx.append(result[i][0])</span><br><span class="line">    yy.append(result[i][1])</span><br><span class="line">xx.append(result[0][0])</span><br><span class="line">yy.append(result[0][1])</span><br><span class="line">plt.rcParams[&#39;font.sans-serif&#39;] &#x3D; [&#39;SimHei&#39;]</span><br><span class="line">plt.plot(xx,yy,color&#x3D;&#39;r&#39;)</span><br><span class="line">plt.title(&quot;最大凸多边形&quot;)</span><br><span class="line">plt.savefig(&#39;C:\\Users\\Elben\\Desktop\\最大凸多边形.png&#39;)</span><br><span class="line">xx1&#x3D;[]</span><br><span class="line">yy1&#x3D;[]</span><br><span class="line">for i in range(len(points)):</span><br><span class="line">    xx1.append(points[i][0])</span><br><span class="line">    yy1.append(points[i][1])</span><br><span class="line">plt.rcParams[&#39;font.sans-serif&#39;] &#x3D; [&#39;SimHei&#39;]</span><br><span class="line">plt.scatter(xx1,yy1,color&#x3D;&#39;r&#39;)</span><br><span class="line">plt.title(&quot;散点图&quot;)</span><br><span class="line">plt.savefig(&#39;C:\\Users\\Elben\\Desktop\\散点图.png&#39;)</span><br><span class="line"></span><br><span class="line">area1&#x3D;mengtekaluo(points,100000)</span><br><span class="line">area2&#x3D;mengtekaluo(points,1000000)</span><br><span class="line">print(&#39;输入10000得到的面积&#x3D;&#39;+str(area1))</span><br><span class="line">print(&#39;输入100000得到的面积&#x3D;&#39;+str(area2))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基于蒙特卡洛算法和Graham扫描法计算包含随机点集的最大凸多边形图形面积&quot;&gt;&lt;a href=&quot;#基于蒙特卡洛算法和Graham扫描法计算包含随机点集的最大凸多边形图形面积&quot; class=&quot;headerlink&quot; title=&quot;基于蒙特卡洛算法和Graham扫描法</summary>
      
    
    
    
    
    <category term="蒙特卡洛算法  凸包算法" scheme="https://github.com/Elbenhorn/Elbenhorn.github.io/tags/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E7%AE%97%E6%B3%95-%E5%87%B8%E5%8C%85%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法学习</title>
    <link href="https://github.com/Elbenhorn/Elbenhorn.github.io/2021/01/29/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>https://github.com/Elbenhorn/Elbenhorn.github.io/2021/01/29/Markdown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-01-29T07:51:18.000Z</published>
    <updated>2021-02-02T09:01:31.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown语法学习"><a href="#Markdown语法学习" class="headerlink" title="Markdown语法学习"></a>Markdown语法学习</h1><p>本篇博客参照了<a href="https://markdown.com.cn/">Markdown基本语法教程</a>   </p><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia等网站，如各大博客平台：WordPress、Drupal、简书等。  </p><h2 id="Markdown基本语法"><a href="#Markdown基本语法" class="headerlink" title="Markdown基本语法"></a>Markdown基本语法</h2><table><thead><tr><th>元素</th><th align="left">Markdown语法</th></tr></thead><tbody><tr><td><a href="#jump1">标题</a></td><td align="left"># H1<br>## H2<br>### H3</td></tr><tr><td>粗体</td><td align="left">**text**</td></tr><tr><td>斜体</td><td align="left">*text*</td></tr><tr><td><a href="#jump2">引用块</a></td><td align="left">&gt;This is a sentence</td></tr><tr><td><a href="#jump3">有序列表</a></td><td align="left">1. First<br>2. Second<br>3. Third</td></tr><tr><td><a href="#jump3">无序列表</a></td><td align="left">- First<br>- Second<br>- Third</td></tr><tr><td><a href="#jump4">代码</a></td><td align="left"><code>`</code>code<code>`</code></td></tr><tr><td><a href="#jump5">分割线</a></td><td align="left">—or____________or***</td></tr><tr><td><a href="#jump6">链接</a></td><td align="left">[title](url)</td></tr><tr><td><a href="#jump7">图片</a></td><td align="left">![title](url)</td></tr></tbody></table><h2 id="Markdown扩展语法"><a href="#Markdown扩展语法" class="headerlink" title="Markdown扩展语法"></a>Markdown扩展语法</h2><table><thead><tr><th>元素</th><th>Markdown扩展语法</th></tr></thead><tbody><tr><td>表格</td><td>|syntax|Description|<br>|———|———–|<br>|1|2|</td></tr><tr><td>代码块</td><td><code>code</code></td></tr><tr><td><a href="#jump8">脚注</a></td><td>Here’s a sentence with a footnote. <code>[^1]</code><br><code>[^1]</code>: This is the footnote.</td></tr><tr><td><a href="#jump9">标题编号</a></td><td>### My Great Heading (#custom-id)</td></tr><tr><td><a href="#jump11">定义列表</a></td><td>term<br>: definition</td></tr><tr><td><a href="jump12">删除线</a></td><td><del>The worl d is flat.</del></td></tr><tr><td>任务列表</td><td>- [x] Write the press release<br>- [ ] Update the website<br>- [ ] Contact the media</td></tr><tr><td>Emoji表情</td><td>/:joy/:</td></tr><tr><td>禁止自动网址连接</td><td>`url</td></tr></tbody></table><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a><span id="jump1">标题</span></h3><p>不同的 Markdown 应用程序处理 <code>#</code> 和标题之间的空格方式并不一致。为了兼容考虑，需要用一个空格在 <code>#</code> 和标题之间进行分隔。  </p><p><img src="http://horndeng.oss-cn-hangzhou.aliyuncs.com/img/%E6%A0%87%E9%A2%98%E8%AF%AD%E6%B3%95.jpg" alt="1">    </p><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a><span id="jump2">引用块</span></h3><p>可以在句子前面添加&gt;转换为引用块。</p><p>/&gt; Dorothy followed her through many of the beautiful rooms in her castle.   </p><blockquote><p>Dorothy followed her through many of the beautiful rooms in her castle.</p></blockquote><p>嵌套块的引用  </p><blockquote><p>This is sentence1</p><blockquote><p>this is sentnece2</p></blockquote></blockquote><h3 id="列表使用"><a href="#列表使用" class="headerlink" title="列表使用"></a><span id="jump3">列表使用</span></h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>创建有序列表，可以每个列表项前添加数字并紧跟一个英文句点。数字不必按数学顺序排列，但是列表应当以数字 1 起始。按照上面这句话打怎么也打不出有序列表的效果，直接用的Typora的快捷键<code>Ctrl+Shift+[</code>:laughing:,下面的无序列表也是，有缘人看到了可以指点一下:satisfied:</p><ol><li>wwww</li><li>wwww</li><li>wwwww</li></ol><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>创建无序列表，可以在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。  </p><ul><li>w</li><li>ww</li><li>www  </li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>用两个反引号<code>code</code>表示代码，多个``可以转移反引号，对于代码块中的代码需要Tab缩进  </p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a><span id="jump5">分割线</span></h3><p>要创建分隔线，请在单独一行上使用三个或多个星号 (<code>***</code>)、破折号 (<code>---</code>) 或下划线 (<code>___</code>) ，并且不能包含其他内容。为了兼容性需要在分割线前后都打上空白行  </p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a><span id="jump6">链接</span></h3><p>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选。</p><p>超链接Markdown语法代码：<code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [Markdown语法](https://markdown.com.cn)。</span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><p>这是一个链接 <a href="https://markdown.com.cn/">Markdown语法</a> </p><p>链接title是当鼠标悬停在链接上时会出现的文字，这个title是可选的，它放在圆括号中链接地址后面，跟链接地址之间以空格分隔。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [Markdown语法](https://markdown.com.cn &quot;最好的markdown教程&quot;)。</span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><p>这是一个链接 <a href="https://markdown.com.cn/">Markdown语法</a>  </p><h3 id="网址和Email地址"><a href="#网址和Email地址" class="headerlink" title="网址和Email地址"></a>网址和Email地址</h3><p>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://markdown.com.cn&gt;</span><br><span class="line">&lt;fake@example.com&gt;</span><br></pre></td></tr></table></figure><p>渲染效果如下：</p><p><a href="https://markdown.com.cn/">https://markdown.com.cn</a><br><a href="mailto:fake@example.com">fake@example.com</a></p><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a><span id="jump7">图片</span></h3><p>图片的引用格式为<code>![title](url)</code>，对应的HTML代码：<code>&lt;img src=&quot;图片链接&quot; alt=&quot;图片alt&quot; title=&quot;图片title&quot;&gt;</code>如果要给图片增加链接可以采用下面的格式  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![沙漠中的岩石图片](url1)](url2)</span><br></pre></td></tr></table></figure><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a><span id="jump8">脚注</span></h3><p>脚注可以用来添加知识或者参考，在需要注释的单词后面添加<code>[^x]</code>即可注释，x可以是标识符或者字母，但不能包含空格。对于注释，它可以出现除列表，块引号和表之外的任何位置，注释的格式为<code>[^x]:my footnote</code></p><h3 id="标题编号"><a href="#标题编号" class="headerlink" title="标题编号"></a><span id="jump9">标题编号</span></h3><p>标题编号可以达到目录的效果，可以利用标题编号跳转到定义的位置，标题编号的格式为<code>[标题](#目标位置)</code>。本文正是利用了标题编号实现本博客内跳转：先利用格式<code>[标题](#目标位置)</code>对<a href="#jump10">要跳转的地方（点我跳转到文章开头）</a>格式化，在用HTML的格式定义<code>&lt;span id=&quot;jump9&quot;&gt;目的地&lt;/span&gt;</code>跳转目的地。</p><h3 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a><span id="jump11">定义列表</span></h3><p>一些Markdown处理器允许您创建术语及其对应定义的<em>定义列表</em>。要创建定义列表，请在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">First Term</span><br><span class="line">: This is the definition of the first term.</span><br><span class="line"></span><br><span class="line">Second Term</span><br><span class="line">: This is one definition of the second term.</span><br><span class="line">: This is another definition of the second term.</span><br></pre></td></tr></table></figure><p>HTML看起来像这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>First Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is the definition of the first term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Second Term<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is one definition of the second term. <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>This is another definition of the second term.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><ul><li><p>First Term</p><p>This is the definition of the first term.</p></li><li><p>Second Term</p><p>This is one definition of the second term.</p><p>This is another definition of the second term.</p></li></ul><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a><span id="jump12">删除线</span></h3><p>可以通过在单词中心放置一条水平线来删除单词。结果看起来像这样。此功能使您可以指示某些单词是一个错误，并不表示要包含在文档中。若要删除单词，请<code>~~</code>在单词前后使用两个波浪号。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~世界是平坦的。~~ 我们现在知道世界是圆的。</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><p>世界是平坦的。 我们现在知道世界是圆的。</p><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a><span id="jump13">任务列表</span></h3><p>任务列表使您可以创建带有复选框的项目列表。在支持任务列表的Markdown应用程序中，复选框将显示在内容旁边。要创建任务列表，请在任务列表项之前添加破折号（<code>-</code>）和方括号，并<code>[ ]</code>在其前面加上空格。要选择一个复选框，请x在方括号（<code>[x]</code>）之间添加in 。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [x] Write the press release</span><br><span class="line">- [ ] Update the website</span><br><span class="line">- [ ] Contact the media</span><br></pre></td></tr></table></figure><p>呈现的输出如下所示：</p><ul><li><input checked disabled type="checkbox"> Write the press release</li><li><input disabled type="checkbox"> Update the website</li><li><input disabled type="checkbox"> Contact the media</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">word1  </span><br><span class="line">word2</span><br><span class="line">word3</span><br></pre></td></tr></table></figure><h3 id="附：表情列表"><a href="#附：表情列表" class="headerlink" title="附：表情列表"></a><span id="jump14">附：表情列表</span></h3><p>引用自<a href="https://gist.github.com/rxaviers/7360908">表情符号简码列表</a></p><p>People</p><table><thead><tr><th>:bowtie: <code>:bowtie:</code></th><th>:smile: <code>:smile:</code></th><th>:laughing: <code>:laughing:</code></th></tr></thead><tbody><tr><td>:blush: <code>:blush:</code></td><td>:smiley: <code>:smiley:</code></td><td>:relaxed: <code>:relaxed:</code></td></tr><tr><td>:smirk: <code>:smirk:</code></td><td>:heart_eyes: <code>:heart_eyes:</code></td><td>:kissing_heart: <code>:kissing_heart:</code></td></tr><tr><td>:kissing_closed_eyes: <code>:kissing_closed_eyes:</code></td><td>:flushed: <code>:flushed:</code></td><td>:relieved: <code>:relieved:</code></td></tr><tr><td>:satisfied: <code>:satisfied:</code></td><td>:grin: <code>:grin:</code></td><td>:wink: <code>:wink:</code></td></tr><tr><td>:stuck_out_tongue_winking_eye: <code>:stuck_out_tongue_winking_eye:</code></td><td>:stuck_out_tongue_closed_eyes: <code>:stuck_out_tongue_closed_eyes:</code></td><td>:grinning: <code>:grinning:</code></td></tr><tr><td>:kissing: <code>:kissing:</code></td><td>:kissing_smiling_eyes: <code>:kissing_smiling_eyes:</code></td><td>:stuck_out_tongue: <code>:stuck_out_tongue:</code></td></tr><tr><td>:sleeping: <code>:sleeping:</code></td><td>:worried: <code>:worried:</code></td><td>:frowning: <code>:frowning:</code></td></tr><tr><td>:anguished: <code>:anguished:</code></td><td>:open_mouth: <code>:open_mouth:</code></td><td>:grimacing: <code>:grimacing:</code></td></tr><tr><td>:confused: <code>:confused:</code></td><td>:hushed: <code>:hushed:</code></td><td>:expressionless: <code>:expressionless:</code></td></tr><tr><td>:unamused: <code>:unamused:</code></td><td>:sweat_smile: <code>:sweat_smile:</code></td><td>:sweat: <code>:sweat:</code></td></tr><tr><td>:disappointed_relieved: <code>:disappointed_relieved:</code></td><td>:weary: <code>:weary:</code></td><td>:pensive: <code>:pensive:</code></td></tr><tr><td>:disappointed: <code>:disappointed:</code></td><td>:confounded: <code>:confounded:</code></td><td>:fearful: <code>:fearful:</code></td></tr><tr><td>:cold_sweat: <code>:cold_sweat:</code></td><td>:persevere: <code>:persevere:</code></td><td>:cry: <code>:cry:</code></td></tr><tr><td>:sob: <code>:sob:</code></td><td>:joy: <code>:joy:</code></td><td>:astonished: <code>:astonished:</code></td></tr><tr><td>:scream: <code>:scream:</code></td><td>:neckbeard: <code>:neckbeard:</code></td><td>:tired_face: <code>:tired_face:</code></td></tr><tr><td>:angry: <code>:angry:</code></td><td>:rage: <code>:rage:</code></td><td>:triumph: <code>:triumph:</code></td></tr><tr><td>:sleepy: <code>:sleepy:</code></td><td>:yum: <code>:yum:</code></td><td>:mask: <code>:mask:</code></td></tr><tr><td>:sunglasses: <code>:sunglasses:</code></td><td>:dizzy_face: <code>:dizzy_face:</code></td><td>:imp: <code>:imp:</code></td></tr><tr><td>:smiling_imp: <code>:smiling_imp:</code></td><td>:neutral_face: <code>:neutral_face:</code></td><td>:no_mouth: <code>:no_mouth:</code></td></tr><tr><td>:innocent: <code>:innocent:</code></td><td>:alien: <code>:alien:</code></td><td>:yellow_heart: <code>:yellow_heart:</code></td></tr><tr><td>:blue_heart: <code>:blue_heart:</code></td><td>:purple_heart: <code>:purple_heart:</code></td><td>:heart: <code>:heart:</code></td></tr><tr><td>:green_heart: <code>:green_heart:</code></td><td>:broken_heart: <code>:broken_heart:</code></td><td>:heartbeat: <code>:heartbeat:</code></td></tr><tr><td>:heartpulse: <code>:heartpulse:</code></td><td>:two_hearts: <code>:two_hearts:</code></td><td>:revolving_hearts: <code>:revolving_hearts:</code></td></tr><tr><td>:cupid: <code>:cupid:</code></td><td>:sparkling_heart: <code>:sparkling_heart:</code></td><td>:sparkles: <code>:sparkles:</code></td></tr><tr><td>:star: <code>:star:</code></td><td>:star2: <code>:star2:</code></td><td>:dizzy: <code>:dizzy:</code></td></tr><tr><td>:boom: <code>:boom:</code></td><td>:collision: <code>:collision:</code></td><td>:anger: <code>:anger:</code></td></tr><tr><td>:exclamation: <code>:exclamation:</code></td><td>:question: <code>:question:</code></td><td>:grey_exclamation: <code>:grey_exclamation:</code></td></tr><tr><td>:grey_question: <code>:grey_question:</code></td><td>:zzz: <code>:zzz:</code></td><td>:dash: <code>:dash:</code></td></tr><tr><td>:sweat_drops: <code>:sweat_drops:</code></td><td>:notes: <code>:notes:</code></td><td>:musical_note: <code>:musical_note:</code></td></tr><tr><td>:fire: <code>:fire:</code></td><td>:hankey: <code>:hankey:</code></td><td>:poop: <code>:poop:</code></td></tr><tr><td>:shit: <code>:shit:</code></td><td>:+1: <code>:+1:</code></td><td>:thumbsup: <code>:thumbsup:</code></td></tr><tr><td>:-1: <code>:-1:</code></td><td>:thumbsdown: <code>:thumbsdown:</code></td><td>:ok_hand: <code>:ok_hand:</code></td></tr><tr><td>:punch: <code>:punch:</code></td><td>:facepunch: <code>:facepunch:</code></td><td>:fist: <code>:fist:</code></td></tr><tr><td>:v: <code>:v:</code></td><td>:wave: <code>:wave:</code></td><td>:hand: <code>:hand:</code></td></tr><tr><td>:raised_hand: <code>:raised_hand:</code></td><td>:open_hands: <code>:open_hands:</code></td><td>:point_up: <code>:point_up:</code></td></tr><tr><td>:point_down: <code>:point_down:</code></td><td>:point_left: <code>:point_left:</code></td><td>:point_right: <code>:point_right:</code></td></tr><tr><td>:raised_hands: <code>:raised_hands:</code></td><td>:pray: <code>:pray:</code></td><td>:point_up_2: <code>:point_up_2:</code></td></tr><tr><td>:clap: <code>:clap:</code></td><td>:muscle: <code>:muscle:</code></td><td>:metal: <code>:metal:</code></td></tr><tr><td>:fu: <code>:fu:</code></td><td>:walking: <code>:walking:</code></td><td>:runner: <code>:runner:</code></td></tr><tr><td>:running: <code>:running:</code></td><td>:couple: <code>:couple:</code></td><td>:family: <code>:family:</code></td></tr><tr><td>:two_men_holding_hands: <code>:two_men_holding_hands:</code></td><td>:two_women_holding_hands: <code>:two_women_holding_hands:</code></td><td>:dancer: <code>:dancer:</code></td></tr><tr><td>:dancers: <code>:dancers:</code></td><td>:ok_woman: <code>:ok_woman:</code></td><td>:no_good: <code>:no_good:</code></td></tr><tr><td>:information_desk_person: <code>:information_desk_person:</code></td><td>:raising_hand: <code>:raising_hand:</code></td><td>:bride_with_veil: <code>:bride_with_veil:</code></td></tr><tr><td>:person_with_pouting_face: <code>:person_with_pouting_face:</code></td><td>:person_frowning: <code>:person_frowning:</code></td><td>:bow: <code>:bow:</code></td></tr><tr><td>:couplekiss: <code>:couplekiss:</code></td><td>:couple_with_heart: <code>:couple_with_heart:</code></td><td>:massage: <code>:massage:</code></td></tr><tr><td>:haircut: <code>:haircut:</code></td><td>:nail_care: <code>:nail_care:</code></td><td>:boy: <code>:boy:</code></td></tr><tr><td>:girl: <code>:girl:</code></td><td>:woman: <code>:woman:</code></td><td>:man: <code>:man:</code></td></tr><tr><td>:baby: <code>:baby:</code></td><td>:older_woman: <code>:older_woman:</code></td><td>:older_man: <code>:older_man:</code></td></tr><tr><td>:person_with_blond_hair: <code>:person_with_blond_hair:</code></td><td>:man_with_gua_pi_mao: <code>:man_with_gua_pi_mao:</code></td><td>:man_with_turban: <code>:man_with_turban:</code></td></tr><tr><td>:construction_worker: <code>:construction_worker:</code></td><td>:cop: <code>:cop:</code></td><td>:angel: <code>:angel:</code></td></tr><tr><td>:princess: <code>:princess:</code></td><td>:smiley_cat: <code>:smiley_cat:</code></td><td>:smile_cat: <code>:smile_cat:</code></td></tr><tr><td>:heart_eyes_cat: <code>:heart_eyes_cat:</code></td><td>:kissing_cat: <code>:kissing_cat:</code></td><td>:smirk_cat: <code>:smirk_cat:</code></td></tr><tr><td>:scream_cat: <code>:scream_cat:</code></td><td>:crying_cat_face: <code>:crying_cat_face:</code></td><td>:joy_cat: <code>:joy_cat:</code></td></tr><tr><td>:pouting_cat: <code>:pouting_cat:</code></td><td>:japanese_ogre: <code>:japanese_ogre:</code></td><td>:japanese_goblin: <code>:japanese_goblin:</code></td></tr><tr><td>:see_no_evil: <code>:see_no_evil:</code></td><td>:hear_no_evil: <code>:hear_no_evil:</code></td><td>:speak_no_evil: <code>:speak_no_evil:</code></td></tr><tr><td>:guardsman: <code>:guardsman:</code></td><td>:skull: <code>:skull:</code></td><td>:feet: <code>:feet:</code></td></tr><tr><td>:lips: <code>:lips:</code></td><td>:kiss: <code>:kiss:</code></td><td>:droplet: <code>:droplet:</code></td></tr><tr><td>:ear: <code>:ear:</code></td><td>:eyes: <code>:eyes:</code></td><td>:nose: <code>:nose:</code></td></tr><tr><td>:tongue: <code>:tongue:</code></td><td>:love_letter: <code>:love_letter:</code></td><td>:bust_in_silhouette: <code>:bust_in_silhouette:</code></td></tr><tr><td>:busts_in_silhouette: <code>:busts_in_silhouette:</code></td><td>:speech_balloon: <code>:speech_balloon:</code></td><td>:thought_balloon: <code>:thought_balloon:</code></td></tr><tr><td>:feelsgood: <code>:feelsgood:</code></td><td>:finnadie: <code>:finnadie:</code></td><td>:goberserk: <code>:goberserk:</code></td></tr><tr><td>:godmode: <code>:godmode:</code></td><td>:hurtrealbad: <code>:hurtrealbad:</code></td><td>:rage1: <code>:rage1:</code></td></tr><tr><td>:rage2: <code>:rage2:</code></td><td>:rage3: <code>:rage3:</code></td><td>:rage4: <code>:rage4:</code></td></tr><tr><td>:suspect: <code>:suspect:</code></td><td>:trollface: <code>:trollface:</code></td><td></td></tr></tbody></table><p>Nature</p><table><thead><tr><th>:sunny: <code>:sunny:</code></th><th>:umbrella: <code>:umbrella:</code></th><th>:cloud: <code>:cloud:</code></th></tr></thead><tbody><tr><td>:snowflake: <code>:snowflake:</code></td><td>:snowman: <code>:snowman:</code></td><td>:zap: <code>:zap:</code></td></tr><tr><td>:cyclone: <code>:cyclone:</code></td><td>:foggy: <code>:foggy:</code></td><td>:ocean: <code>:ocean:</code></td></tr><tr><td>:cat: <code>:cat:</code></td><td>:dog: <code>:dog:</code></td><td>:mouse: <code>:mouse:</code></td></tr><tr><td>:hamster: <code>:hamster:</code></td><td>:rabbit: <code>:rabbit:</code></td><td>:wolf: <code>:wolf:</code></td></tr><tr><td>:frog: <code>:frog:</code></td><td>:tiger: <code>:tiger:</code></td><td>:koala: <code>:koala:</code></td></tr><tr><td>:bear: <code>:bear:</code></td><td>:pig: <code>:pig:</code></td><td>:pig_nose: <code>:pig_nose:</code></td></tr><tr><td>:cow: <code>:cow:</code></td><td>:boar: <code>:boar:</code></td><td>:monkey_face: <code>:monkey_face:</code></td></tr><tr><td>:monkey: <code>:monkey:</code></td><td>:horse: <code>:horse:</code></td><td>:racehorse: <code>:racehorse:</code></td></tr><tr><td>:camel: <code>:camel:</code></td><td>:sheep: <code>:sheep:</code></td><td>:elephant: <code>:elephant:</code></td></tr><tr><td>:panda_face: <code>:panda_face:</code></td><td>:snake: <code>:snake:</code></td><td>:bird: <code>:bird:</code></td></tr><tr><td>:baby_chick: <code>:baby_chick:</code></td><td>:hatched_chick: <code>:hatched_chick:</code></td><td>:hatching_chick: <code>:hatching_chick:</code></td></tr><tr><td>:chicken: <code>:chicken:</code></td><td>:penguin: <code>:penguin:</code></td><td>:turtle: <code>:turtle:</code></td></tr><tr><td>:bug: <code>:bug:</code></td><td>:honeybee: <code>:honeybee:</code></td><td>:ant: <code>:ant:</code></td></tr><tr><td>:beetle: <code>:beetle:</code></td><td>:snail: <code>:snail:</code></td><td>:octopus: <code>:octopus:</code></td></tr><tr><td>:tropical_fish: <code>:tropical_fish:</code></td><td>:fish: <code>:fish:</code></td><td>:whale: <code>:whale:</code></td></tr><tr><td>:whale2: <code>:whale2:</code></td><td>:dolphin: <code>:dolphin:</code></td><td>:cow2: <code>:cow2:</code></td></tr><tr><td>:ram: <code>:ram:</code></td><td>:rat: <code>:rat:</code></td><td>:water_buffalo: <code>:water_buffalo:</code></td></tr><tr><td>:tiger2: <code>:tiger2:</code></td><td>:rabbit2: <code>:rabbit2:</code></td><td>:dragon: <code>:dragon:</code></td></tr><tr><td>:goat: <code>:goat:</code></td><td>:rooster: <code>:rooster:</code></td><td>:dog2: <code>:dog2:</code></td></tr><tr><td>:pig2: <code>:pig2:</code></td><td>:mouse2: <code>:mouse2:</code></td><td>:ox: <code>:ox:</code></td></tr><tr><td>:dragon_face: <code>:dragon_face:</code></td><td>:blowfish: <code>:blowfish:</code></td><td>:crocodile: <code>:crocodile:</code></td></tr><tr><td>:dromedary_camel: <code>:dromedary_camel:</code></td><td>:leopard: <code>:leopard:</code></td><td>:cat2: <code>:cat2:</code></td></tr><tr><td>:poodle: <code>:poodle:</code></td><td>:paw_prints: <code>:paw_prints:</code></td><td>:bouquet: <code>:bouquet:</code></td></tr><tr><td>:cherry_blossom: <code>:cherry_blossom:</code></td><td>:tulip: <code>:tulip:</code></td><td>:four_leaf_clover: <code>:four_leaf_clover:</code></td></tr><tr><td>:rose: <code>:rose:</code></td><td>:sunflower: <code>:sunflower:</code></td><td>:hibiscus: <code>:hibiscus:</code></td></tr><tr><td>:maple_leaf: <code>:maple_leaf:</code></td><td>:leaves: <code>:leaves:</code></td><td>:fallen_leaf: <code>:fallen_leaf:</code></td></tr><tr><td>:herb: <code>:herb:</code></td><td>:mushroom: <code>:mushroom:</code></td><td>:cactus: <code>:cactus:</code></td></tr><tr><td>:palm_tree: <code>:palm_tree:</code></td><td>:evergreen_tree: <code>:evergreen_tree:</code></td><td>:deciduous_tree: <code>:deciduous_tree:</code></td></tr><tr><td>:chestnut: <code>:chestnut:</code></td><td>:seedling: <code>:seedling:</code></td><td>:blossom: <code>:blossom:</code></td></tr><tr><td>:ear_of_rice: <code>:ear_of_rice:</code></td><td>:shell: <code>:shell:</code></td><td>:globe_with_meridians: <code>:globe_with_meridians:</code></td></tr><tr><td>:sun_with_face: <code>:sun_with_face:</code></td><td>:full_moon_with_face: <code>:full_moon_with_face:</code></td><td>:new_moon_with_face: <code>:new_moon_with_face:</code></td></tr><tr><td>:new_moon: <code>:new_moon:</code></td><td>:waxing_crescent_moon: <code>:waxing_crescent_moon:</code></td><td>:first_quarter_moon: <code>:first_quarter_moon:</code></td></tr><tr><td>:waxing_gibbous_moon: <code>:waxing_gibbous_moon:</code></td><td>:full_moon: <code>:full_moon:</code></td><td>:waning_gibbous_moon: <code>:waning_gibbous_moon:</code></td></tr><tr><td>:last_quarter_moon: <code>:last_quarter_moon:</code></td><td>:waning_crescent_moon: <code>:waning_crescent_moon:</code></td><td>:last_quarter_moon_with_face: <code>:last_quarter_moon_with_face:</code></td></tr><tr><td>:first_quarter_moon_with_face: <code>:first_quarter_moon_with_face:</code></td><td>:moon: <code>:moon:</code></td><td>:earth_africa: <code>:earth_africa:</code></td></tr><tr><td>:earth_americas: <code>:earth_americas:</code></td><td>:earth_asia: <code>:earth_asia:</code></td><td>:volcano: <code>:volcano:</code></td></tr><tr><td>:milky_way: <code>:milky_way:</code></td><td>:partly_sunny: <code>:partly_sunny:</code></td><td>:octocat: <code>:octocat:</code></td></tr><tr><td>:squirrel: <code>:squirrel:</code></td><td></td><td></td></tr></tbody></table><p>Objects</p><table><thead><tr><th>:bamboo: <code>:bamboo:</code></th><th>:gift_heart: <code>:gift_heart:</code></th><th>:dolls: <code>:dolls:</code></th></tr></thead><tbody><tr><td>:school_satchel: <code>:school_satchel:</code></td><td>:mortar_board: <code>:mortar_board:</code></td><td>:flags: <code>:flags:</code></td></tr><tr><td>:fireworks: <code>:fireworks:</code></td><td>:sparkler: <code>:sparkler:</code></td><td>:wind_chime: <code>:wind_chime:</code></td></tr><tr><td>:rice_scene: <code>:rice_scene:</code></td><td>:jack_o_lantern: <code>:jack_o_lantern:</code></td><td>:ghost: <code>:ghost:</code></td></tr><tr><td>:santa: <code>:santa:</code></td><td>:christmas_tree: <code>:christmas_tree:</code></td><td>:gift: <code>:gift:</code></td></tr><tr><td>:bell: <code>:bell:</code></td><td>:no_bell: <code>:no_bell:</code></td><td>:tanabata_tree: <code>:tanabata_tree:</code></td></tr><tr><td>:tada: <code>:tada:</code></td><td>:confetti_ball: <code>:confetti_ball:</code></td><td>:balloon: <code>:balloon:</code></td></tr><tr><td>:crystal_ball: <code>:crystal_ball:</code></td><td>:cd: <code>:cd:</code></td><td>:dvd: <code>:dvd:</code></td></tr><tr><td>:floppy_disk: <code>:floppy_disk:</code></td><td>:camera: <code>:camera:</code></td><td>:video_camera: <code>:video_camera:</code></td></tr><tr><td>:movie_camera: <code>:movie_camera:</code></td><td>:computer: <code>:computer:</code></td><td>:tv: <code>:tv:</code></td></tr><tr><td>:iphone: <code>:iphone:</code></td><td>:phone: <code>:phone:</code></td><td>:telephone: <code>:telephone:</code></td></tr><tr><td>:telephone_receiver: <code>:telephone_receiver:</code></td><td>:pager: <code>:pager:</code></td><td>:fax: <code>:fax:</code></td></tr><tr><td>:minidisc: <code>:minidisc:</code></td><td>:vhs: <code>:vhs:</code></td><td>:sound: <code>:sound:</code></td></tr><tr><td>:speaker: <code>:speaker:</code></td><td>:mute: <code>:mute:</code></td><td>:loudspeaker: <code>:loudspeaker:</code></td></tr><tr><td>:mega: <code>:mega:</code></td><td>:hourglass: <code>:hourglass:</code></td><td>:hourglass_flowing_sand: <code>:hourglass_flowing_sand:</code></td></tr><tr><td>:alarm_clock: <code>:alarm_clock:</code></td><td>:watch: <code>:watch:</code></td><td>:radio: <code>:radio:</code></td></tr><tr><td>:satellite: <code>:satellite:</code></td><td>:loop: <code>:loop:</code></td><td>:mag: <code>:mag:</code></td></tr><tr><td>:mag_right: <code>:mag_right:</code></td><td>:unlock: <code>:unlock:</code></td><td>:lock: <code>:lock:</code></td></tr><tr><td>:lock_with_ink_pen: <code>:lock_with_ink_pen:</code></td><td>:closed_lock_with_key: <code>:closed_lock_with_key:</code></td><td>:key: <code>:key:</code></td></tr><tr><td>:bulb: <code>:bulb:</code></td><td>:flashlight: <code>:flashlight:</code></td><td>:high_brightness: <code>:high_brightness:</code></td></tr><tr><td>:low_brightness: <code>:low_brightness:</code></td><td>:electric_plug: <code>:electric_plug:</code></td><td>:battery: <code>:battery:</code></td></tr><tr><td>:calling: <code>:calling:</code></td><td>:email: <code>:email:</code></td><td>:mailbox: <code>:mailbox:</code></td></tr><tr><td>:postbox: <code>:postbox:</code></td><td>:bath: <code>:bath:</code></td><td>:bathtub: <code>:bathtub:</code></td></tr><tr><td>:shower: <code>:shower:</code></td><td>:toilet: <code>:toilet:</code></td><td>:wrench: <code>:wrench:</code></td></tr><tr><td>:nut_and_bolt: <code>:nut_and_bolt:</code></td><td>:hammer: <code>:hammer:</code></td><td>:seat: <code>:seat:</code></td></tr><tr><td>:moneybag: <code>:moneybag:</code></td><td>:yen: <code>:yen:</code></td><td>:dollar: <code>:dollar:</code></td></tr><tr><td>:pound: <code>:pound:</code></td><td>:euro: <code>:euro:</code></td><td>:credit_card: <code>:credit_card:</code></td></tr><tr><td>:money_with_wings: <code>:money_with_wings:</code></td><td>:e-mail: <code>:e-mail:</code></td><td>:inbox_tray: <code>:inbox_tray:</code></td></tr><tr><td>:outbox_tray: <code>:outbox_tray:</code></td><td>:envelope: <code>:envelope:</code></td><td>:incoming_envelope: <code>:incoming_envelope:</code></td></tr><tr><td>:postal_horn: <code>:postal_horn:</code></td><td>:mailbox_closed: <code>:mailbox_closed:</code></td><td>:mailbox_with_mail: <code>:mailbox_with_mail:</code></td></tr><tr><td>:mailbox_with_no_mail: <code>:mailbox_with_no_mail:</code></td><td>:door: <code>:door:</code></td><td>:smoking: <code>:smoking:</code></td></tr><tr><td>:bomb: <code>:bomb:</code></td><td>:gun: <code>:gun:</code></td><td>:hocho: <code>:hocho:</code></td></tr><tr><td>:pill: <code>:pill:</code></td><td>:syringe: <code>:syringe:</code></td><td>:page_facing_up: <code>:page_facing_up:</code></td></tr><tr><td>:page_with_curl: <code>:page_with_curl:</code></td><td>:bookmark_tabs: <code>:bookmark_tabs:</code></td><td>:bar_chart: <code>:bar_chart:</code></td></tr><tr><td>:chart_with_upwards_trend: <code>:chart_with_upwards_trend:</code></td><td>:chart_with_downwards_trend: <code>:chart_with_downwards_trend:</code></td><td>:scroll: <code>:scroll:</code></td></tr><tr><td>:clipboard: <code>:clipboard:</code></td><td>:calendar: <code>:calendar:</code></td><td>:date: <code>:date:</code></td></tr><tr><td>:card_index: <code>:card_index:</code></td><td>:file_folder: <code>:file_folder:</code></td><td>:open_file_folder: <code>:open_file_folder:</code></td></tr><tr><td>:scissors: <code>:scissors:</code></td><td>:pushpin: <code>:pushpin:</code></td><td>:paperclip: <code>:paperclip:</code></td></tr><tr><td>:black_nib: <code>:black_nib:</code></td><td>:pencil2: <code>:pencil2:</code></td><td>:straight_ruler: <code>:straight_ruler:</code></td></tr><tr><td>:triangular_ruler: <code>:triangular_ruler:</code></td><td>:closed_book: <code>:closed_book:</code></td><td>:green_book: <code>:green_book:</code></td></tr><tr><td>:blue_book: <code>:blue_book:</code></td><td>:orange_book: <code>:orange_book:</code></td><td>:notebook: <code>:notebook:</code></td></tr><tr><td>:notebook_with_decorative_cover: <code>:notebook_with_decorative_cover:</code></td><td>:ledger: <code>:ledger:</code></td><td>:books: <code>:books:</code></td></tr><tr><td>:bookmark: <code>:bookmark:</code></td><td>:name_badge: <code>:name_badge:</code></td><td>:microscope: <code>:microscope:</code></td></tr><tr><td>:telescope: <code>:telescope:</code></td><td>:newspaper: <code>:newspaper:</code></td><td>:football: <code>:football:</code></td></tr><tr><td>:basketball: <code>:basketball:</code></td><td>:soccer: <code>:soccer:</code></td><td>:baseball: <code>:baseball:</code></td></tr><tr><td>:tennis: <code>:tennis:</code></td><td>:8ball: <code>:8ball:</code></td><td>:rugby_football: <code>:rugby_football:</code></td></tr><tr><td>:bowling: <code>:bowling:</code></td><td>:golf: <code>:golf:</code></td><td>:mountain_bicyclist: <code>:mountain_bicyclist:</code></td></tr><tr><td>:bicyclist: <code>:bicyclist:</code></td><td>:horse_racing: <code>:horse_racing:</code></td><td>:snowboarder: <code>:snowboarder:</code></td></tr><tr><td>:swimmer: <code>:swimmer:</code></td><td>:surfer: <code>:surfer:</code></td><td>:ski: <code>:ski:</code></td></tr><tr><td>:spades: <code>:spades:</code></td><td>:hearts: <code>:hearts:</code></td><td>:clubs: <code>:clubs:</code></td></tr><tr><td>:diamonds: <code>:diamonds:</code></td><td>:gem: <code>:gem:</code></td><td>:ring: <code>:ring:</code></td></tr><tr><td>:trophy: <code>:trophy:</code></td><td>:musical_score: <code>:musical_score:</code></td><td>:musical_keyboard: <code>:musical_keyboard:</code></td></tr><tr><td>:violin: <code>:violin:</code></td><td>:space_invader: <code>:space_invader:</code></td><td>:video_game: <code>:video_game:</code></td></tr><tr><td>:black_joker: <code>:black_joker:</code></td><td>:flower_playing_cards: <code>:flower_playing_cards:</code></td><td>:game_die: <code>:game_die:</code></td></tr><tr><td>:dart: <code>:dart:</code></td><td>:mahjong: <code>:mahjong:</code></td><td>:clapper: <code>:clapper:</code></td></tr><tr><td>:memo: <code>:memo:</code></td><td>:pencil: <code>:pencil:</code></td><td>:book: <code>:book:</code></td></tr><tr><td>:art: <code>:art:</code></td><td>:microphone: <code>:microphone:</code></td><td>:headphones: <code>:headphones:</code></td></tr><tr><td>:trumpet: <code>:trumpet:</code></td><td>:saxophone: <code>:saxophone:</code></td><td>:guitar: <code>:guitar:</code></td></tr><tr><td>:shoe: <code>:shoe:</code></td><td>:sandal: <code>:sandal:</code></td><td>:high_heel: <code>:high_heel:</code></td></tr><tr><td>:lipstick: <code>:lipstick:</code></td><td>:boot: <code>:boot:</code></td><td>:shirt: <code>:shirt:</code></td></tr><tr><td>:tshirt: <code>:tshirt:</code></td><td>:necktie: <code>:necktie:</code></td><td>:womans_clothes: <code>:womans_clothes:</code></td></tr><tr><td>:dress: <code>:dress:</code></td><td>:running_shirt_with_sash: <code>:running_shirt_with_sash:</code></td><td>:jeans: <code>:jeans:</code></td></tr><tr><td>:kimono: <code>:kimono:</code></td><td>:bikini: <code>:bikini:</code></td><td>:ribbon: <code>:ribbon:</code></td></tr><tr><td>:tophat: <code>:tophat:</code></td><td>:crown: <code>:crown:</code></td><td>:womans_hat: <code>:womans_hat:</code></td></tr><tr><td>:mans_shoe: <code>:mans_shoe:</code></td><td>:closed_umbrella: <code>:closed_umbrella:</code></td><td>:briefcase: <code>:briefcase:</code></td></tr><tr><td>:handbag: <code>:handbag:</code></td><td>:pouch: <code>:pouch:</code></td><td>:purse: <code>:purse:</code></td></tr><tr><td>:eyeglasses: <code>:eyeglasses:</code></td><td>:fishing_pole_and_fish: <code>:fishing_pole_and_fish:</code></td><td>:coffee: <code>:coffee:</code></td></tr><tr><td>:tea: <code>:tea:</code></td><td>:sake: <code>:sake:</code></td><td>:baby_bottle: <code>:baby_bottle:</code></td></tr><tr><td>:beer: <code>:beer:</code></td><td>:beers: <code>:beers:</code></td><td>:cocktail: <code>:cocktail:</code></td></tr><tr><td>:tropical_drink: <code>:tropical_drink:</code></td><td>:wine_glass: <code>:wine_glass:</code></td><td>:fork_and_knife: <code>:fork_and_knife:</code></td></tr><tr><td>:pizza: <code>:pizza:</code></td><td>:hamburger: <code>:hamburger:</code></td><td>:fries: <code>:fries:</code></td></tr><tr><td>:poultry_leg: <code>:poultry_leg:</code></td><td>:meat_on_bone: <code>:meat_on_bone:</code></td><td>:spaghetti: <code>:spaghetti:</code></td></tr><tr><td>:curry: <code>:curry:</code></td><td>:fried_shrimp: <code>:fried_shrimp:</code></td><td>:bento: <code>:bento:</code></td></tr><tr><td>:sushi: <code>:sushi:</code></td><td>:fish_cake: <code>:fish_cake:</code></td><td>:rice_ball: <code>:rice_ball:</code></td></tr><tr><td>:rice_cracker: <code>:rice_cracker:</code></td><td>:rice: <code>:rice:</code></td><td>:ramen: <code>:ramen:</code></td></tr><tr><td>:stew: <code>:stew:</code></td><td>:oden: <code>:oden:</code></td><td>:dango: <code>:dango:</code></td></tr><tr><td>:egg: <code>:egg:</code></td><td>:bread: <code>:bread:</code></td><td>:doughnut: <code>:doughnut:</code></td></tr><tr><td>:custard: <code>:custard:</code></td><td>:icecream: <code>:icecream:</code></td><td>:ice_cream: <code>:ice_cream:</code></td></tr><tr><td>:shaved_ice: <code>:shaved_ice:</code></td><td>:birthday: <code>:birthday:</code></td><td>:cake: <code>:cake:</code></td></tr><tr><td>:cookie: <code>:cookie:</code></td><td>:chocolate_bar: <code>:chocolate_bar:</code></td><td>:candy: <code>:candy:</code></td></tr><tr><td>:lollipop: <code>:lollipop:</code></td><td>:honey_pot: <code>:honey_pot:</code></td><td>:apple: <code>:apple:</code></td></tr><tr><td>:green_apple: <code>:green_apple:</code></td><td>:tangerine: <code>:tangerine:</code></td><td>:lemon: <code>:lemon:</code></td></tr><tr><td>:cherries: <code>:cherries:</code></td><td>:grapes: <code>:grapes:</code></td><td>:watermelon: <code>:watermelon:</code></td></tr><tr><td>:strawberry: <code>:strawberry:</code></td><td>:peach: <code>:peach:</code></td><td>:melon: <code>:melon:</code></td></tr><tr><td>:banana: <code>:banana:</code></td><td>:pear: <code>:pear:</code></td><td>:pineapple: <code>:pineapple:</code></td></tr><tr><td>:sweet_potato: <code>:sweet_potato:</code></td><td>:eggplant: <code>:eggplant:</code></td><td>:tomato: <code>:tomato:</code></td></tr><tr><td>:corn: <code>:corn:</code></td><td></td><td></td></tr></tbody></table><p>Places</p><table><thead><tr><th>:house: <code>:house:</code></th><th>:house_with_garden: <code>:house_with_garden:</code></th><th>:school: <code>:school:</code></th></tr></thead><tbody><tr><td>:office: <code>:office:</code></td><td>:post_office: <code>:post_office:</code></td><td>:hospital: <code>:hospital:</code></td></tr><tr><td>:bank: <code>:bank:</code></td><td>:convenience_store: <code>:convenience_store:</code></td><td>:love_hotel: <code>:love_hotel:</code></td></tr><tr><td>:hotel: <code>:hotel:</code></td><td>:wedding: <code>:wedding:</code></td><td>:church: <code>:church:</code></td></tr><tr><td>:department_store: <code>:department_store:</code></td><td>:european_post_office: <code>:european_post_office:</code></td><td>:city_sunrise: <code>:city_sunrise:</code></td></tr><tr><td>:city_sunset: <code>:city_sunset:</code></td><td>:japanese_castle: <code>:japanese_castle:</code></td><td>:european_castle: <code>:european_castle:</code></td></tr><tr><td>:tent: <code>:tent:</code></td><td>:factory: <code>:factory:</code></td><td>:tokyo_tower: <code>:tokyo_tower:</code></td></tr><tr><td>:japan: <code>:japan:</code></td><td>:mount_fuji: <code>:mount_fuji:</code></td><td>:sunrise_over_mountains: <code>:sunrise_over_mountains:</code></td></tr><tr><td>:sunrise: <code>:sunrise:</code></td><td>:stars: <code>:stars:</code></td><td>:statue_of_liberty: <code>:statue_of_liberty:</code></td></tr><tr><td>:bridge_at_night: <code>:bridge_at_night:</code></td><td>:carousel_horse: <code>:carousel_horse:</code></td><td>:rainbow: <code>:rainbow:</code></td></tr><tr><td>:ferris_wheel: <code>:ferris_wheel:</code></td><td>:fountain: <code>:fountain:</code></td><td>:roller_coaster: <code>:roller_coaster:</code></td></tr><tr><td>:ship: <code>:ship:</code></td><td>:speedboat: <code>:speedboat:</code></td><td>:boat: <code>:boat:</code></td></tr><tr><td>:sailboat: <code>:sailboat:</code></td><td>:rowboat: <code>:rowboat:</code></td><td>:anchor: <code>:anchor:</code></td></tr><tr><td>:rocket: <code>:rocket:</code></td><td>:airplane: <code>:airplane:</code></td><td>:helicopter: <code>:helicopter:</code></td></tr><tr><td>:steam_locomotive: <code>:steam_locomotive:</code></td><td>:tram: <code>:tram:</code></td><td>:mountain_railway: <code>:mountain_railway:</code></td></tr><tr><td>:bike: <code>:bike:</code></td><td>:aerial_tramway: <code>:aerial_tramway:</code></td><td>:suspension_railway: <code>:suspension_railway:</code></td></tr><tr><td>:mountain_cableway: <code>:mountain_cableway:</code></td><td>:tractor: <code>:tractor:</code></td><td>:blue_car: <code>:blue_car:</code></td></tr><tr><td>:oncoming_automobile: <code>:oncoming_automobile:</code></td><td>:car: <code>:car:</code></td><td>:red_car: <code>:red_car:</code></td></tr><tr><td>:taxi: <code>:taxi:</code></td><td>:oncoming_taxi: <code>:oncoming_taxi:</code></td><td>:articulated_lorry: <code>:articulated_lorry:</code></td></tr><tr><td>:bus: <code>:bus:</code></td><td>:oncoming_bus: <code>:oncoming_bus:</code></td><td>:rotating_light: <code>:rotating_light:</code></td></tr><tr><td>:police_car: <code>:police_car:</code></td><td>:oncoming_police_car: <code>:oncoming_police_car:</code></td><td>:fire_engine: <code>:fire_engine:</code></td></tr><tr><td>:ambulance: <code>:ambulance:</code></td><td>:minibus: <code>:minibus:</code></td><td>:truck: <code>:truck:</code></td></tr><tr><td>:train: <code>:train:</code></td><td>:station: <code>:station:</code></td><td>:train2: <code>:train2:</code></td></tr><tr><td>:bullettrain_front: <code>:bullettrain_front:</code></td><td>:bullettrain_side: <code>:bullettrain_side:</code></td><td>:light_rail: <code>:light_rail:</code></td></tr><tr><td>:monorail: <code>:monorail:</code></td><td>:railway_car: <code>:railway_car:</code></td><td>:trolleybus: <code>:trolleybus:</code></td></tr><tr><td>:ticket: <code>:ticket:</code></td><td>:fuelpump: <code>:fuelpump:</code></td><td>:vertical_traffic_light: <code>:vertical_traffic_light:</code></td></tr><tr><td>:traffic_light: <code>:traffic_light:</code></td><td>:warning: <code>:warning:</code></td><td>:construction: <code>:construction:</code></td></tr><tr><td>:beginner: <code>:beginner:</code></td><td>:atm: <code>:atm:</code></td><td>:slot_machine: <code>:slot_machine:</code></td></tr><tr><td>:busstop: <code>:busstop:</code></td><td>:barber: <code>:barber:</code></td><td>:hotsprings: <code>:hotsprings:</code></td></tr><tr><td>:checkered_flag: <code>:checkered_flag:</code></td><td>:crossed_flags: <code>:crossed_flags:</code></td><td>:izakaya_lantern: <code>:izakaya_lantern:</code></td></tr><tr><td>:moyai: <code>:moyai:</code></td><td>:circus_tent: <code>:circus_tent:</code></td><td>:performing_arts: <code>:performing_arts:</code></td></tr><tr><td>:round_pushpin: <code>:round_pushpin:</code></td><td>:triangular_flag_on_post: <code>:triangular_flag_on_post:</code></td><td>:jp: <code>:jp:</code></td></tr><tr><td>:kr: <code>:kr:</code></td><td>:cn: <code>:cn:</code></td><td>:us: <code>:us:</code></td></tr><tr><td>:fr: <code>:fr:</code></td><td>:es: <code>:es:</code></td><td>:it: <code>:it:</code></td></tr><tr><td>:ru: <code>:ru:</code></td><td>:gb: <code>:gb:</code></td><td>:uk: <code>:uk:</code></td></tr><tr><td>:de: <code>:de:</code></td><td></td><td></td></tr></tbody></table><p>Symbols</p><table><thead><tr><th>:one: <code>:one:</code></th><th>:two: <code>:two:</code></th><th>:three: <code>:three:</code></th></tr></thead><tbody><tr><td>:four: <code>:four:</code></td><td>:five: <code>:five:</code></td><td>:six: <code>:six:</code></td></tr><tr><td>:seven: <code>:seven:</code></td><td>:eight: <code>:eight:</code></td><td>:nine: <code>:nine:</code></td></tr><tr><td>:keycap_ten: <code>:keycap_ten:</code></td><td>:1234: <code>:1234:</code></td><td>:zero: <code>:zero:</code></td></tr><tr><td>:hash: <code>:hash:</code></td><td>:symbols: <code>:symbols:</code></td><td>:arrow_backward: <code>:arrow_backward:</code></td></tr><tr><td>:arrow_down: <code>:arrow_down:</code></td><td>:arrow_forward: <code>:arrow_forward:</code></td><td>:arrow_left: <code>:arrow_left:</code></td></tr><tr><td>:capital_abcd: <code>:capital_abcd:</code></td><td>:abcd: <code>:abcd:</code></td><td>:abc: <code>:abc:</code></td></tr><tr><td>:arrow_lower_left: <code>:arrow_lower_left:</code></td><td>:arrow_lower_right: <code>:arrow_lower_right:</code></td><td>:arrow_right: <code>:arrow_right:</code></td></tr><tr><td>:arrow_up: <code>:arrow_up:</code></td><td>:arrow_upper_left: <code>:arrow_upper_left:</code></td><td>:arrow_upper_right: <code>:arrow_upper_right:</code></td></tr><tr><td>:arrow_double_down: <code>:arrow_double_down:</code></td><td>:arrow_double_up: <code>:arrow_double_up:</code></td><td>:arrow_down_small: <code>:arrow_down_small:</code></td></tr><tr><td>:arrow_heading_down: <code>:arrow_heading_down:</code></td><td>:arrow_heading_up: <code>:arrow_heading_up:</code></td><td>:leftwards_arrow_with_hook: <code>:leftwards_arrow_with_hook:</code></td></tr><tr><td>:arrow_right_hook: <code>:arrow_right_hook:</code></td><td>:left_right_arrow: <code>:left_right_arrow:</code></td><td>:arrow_up_down: <code>:arrow_up_down:</code></td></tr><tr><td>:arrow_up_small: <code>:arrow_up_small:</code></td><td>:arrows_clockwise: <code>:arrows_clockwise:</code></td><td>:arrows_counterclockwise: <code>:arrows_counterclockwise:</code></td></tr><tr><td>:rewind: <code>:rewind:</code></td><td>:fast_forward: <code>:fast_forward:</code></td><td>:information_source: <code>:information_source:</code></td></tr><tr><td>:ok: <code>:ok:</code></td><td>:twisted_rightwards_arrows: <code>:twisted_rightwards_arrows:</code></td><td>:repeat: <code>:repeat:</code></td></tr><tr><td>:repeat_one: <code>:repeat_one:</code></td><td>:new: <code>:new:</code></td><td>:top: <code>:top:</code></td></tr><tr><td>:up: <code>:up:</code></td><td>:cool: <code>:cool:</code></td><td>:free: <code>:free:</code></td></tr><tr><td>:ng: <code>:ng:</code></td><td>:cinema: <code>:cinema:</code></td><td>:koko: <code>:koko:</code></td></tr><tr><td>:signal_strength: <code>:signal_strength:</code></td><td>:u5272: <code>:u5272:</code></td><td>:u5408: <code>:u5408:</code></td></tr><tr><td>:u55b6: <code>:u55b6:</code></td><td>:u6307: <code>:u6307:</code></td><td>:u6708: <code>:u6708:</code></td></tr><tr><td>:u6709: <code>:u6709:</code></td><td>:u6e80: <code>:u6e80:</code></td><td>:u7121: <code>:u7121:</code></td></tr><tr><td>:u7533: <code>:u7533:</code></td><td>:u7a7a: <code>:u7a7a:</code></td><td>:u7981: <code>:u7981:</code></td></tr><tr><td>:sa: <code>:sa:</code></td><td>:restroom: <code>:restroom:</code></td><td>:mens: <code>:mens:</code></td></tr><tr><td>:womens: <code>:womens:</code></td><td>:baby_symbol: <code>:baby_symbol:</code></td><td>:no_smoking: <code>:no_smoking:</code></td></tr><tr><td>:parking: <code>:parking:</code></td><td>:wheelchair: <code>:wheelchair:</code></td><td>:metro: <code>:metro:</code></td></tr><tr><td>:baggage_claim: <code>:baggage_claim:</code></td><td>:accept: <code>:accept:</code></td><td>:wc: <code>:wc:</code></td></tr><tr><td>:potable_water: <code>:potable_water:</code></td><td>:put_litter_in_its_place: <code>:put_litter_in_its_place:</code></td><td>:secret: <code>:secret:</code></td></tr><tr><td>:congratulations: <code>:congratulations:</code></td><td>:m: <code>:m:</code></td><td>:passport_control: <code>:passport_control:</code></td></tr><tr><td>:left_luggage: <code>:left_luggage:</code></td><td>:customs: <code>:customs:</code></td><td>:ideograph_advantage: <code>:ideograph_advantage:</code></td></tr><tr><td>:cl: <code>:cl:</code></td><td>:sos: <code>:sos:</code></td><td>:id: <code>:id:</code></td></tr><tr><td>:no_entry_sign: <code>:no_entry_sign:</code></td><td>:underage: <code>:underage:</code></td><td>:no_mobile_phones: <code>:no_mobile_phones:</code></td></tr><tr><td>:do_not_litter: <code>:do_not_litter:</code></td><td>:non-potable_water: <code>:non-potable_water:</code></td><td>:no_bicycles: <code>:no_bicycles:</code></td></tr><tr><td>:no_pedestrians: <code>:no_pedestrians:</code></td><td>:children_crossing: <code>:children_crossing:</code></td><td>:no_entry: <code>:no_entry:</code></td></tr><tr><td>:eight_spoked_asterisk: <code>:eight_spoked_asterisk:</code></td><td>:eight_pointed_black_star: <code>:eight_pointed_black_star:</code></td><td>:heart_decoration: <code>:heart_decoration:</code></td></tr><tr><td>:vs: <code>:vs:</code></td><td>:vibration_mode: <code>:vibration_mode:</code></td><td>:mobile_phone_off: <code>:mobile_phone_off:</code></td></tr><tr><td>:chart: <code>:chart:</code></td><td>:currency_exchange: <code>:currency_exchange:</code></td><td>:aries: <code>:aries:</code></td></tr><tr><td>:taurus: <code>:taurus:</code></td><td>:gemini: <code>:gemini:</code></td><td>:cancer: <code>:cancer:</code></td></tr><tr><td>:leo: <code>:leo:</code></td><td>:virgo: <code>:virgo:</code></td><td>:libra: <code>:libra:</code></td></tr><tr><td>:scorpius: <code>:scorpius:</code></td><td>:sagittarius: <code>:sagittarius:</code></td><td>:capricorn: <code>:capricorn:</code></td></tr><tr><td>:aquarius: <code>:aquarius:</code></td><td>:pisces: <code>:pisces:</code></td><td>:ophiuchus: <code>:ophiuchus:</code></td></tr><tr><td>:six_pointed_star: <code>:six_pointed_star:</code></td><td>:negative_squared_cross_mark: <code>:negative_squared_cross_mark:</code></td><td>:a: <code>:a:</code></td></tr><tr><td>:b: <code>:b:</code></td><td>:ab: <code>:ab:</code></td><td>:o2: <code>:o2:</code></td></tr><tr><td>:diamond_shape_with_a_dot_inside: <code>:diamond_shape_with_a_dot_inside:</code></td><td>:recycle: <code>:recycle:</code></td><td>:end: <code>:end:</code></td></tr><tr><td>:on: <code>:on:</code></td><td>:soon: <code>:soon:</code></td><td>:clock1: <code>:clock1:</code></td></tr><tr><td>:clock130: <code>:clock130:</code></td><td>:clock10: <code>:clock10:</code></td><td>:clock1030: <code>:clock1030:</code></td></tr><tr><td>:clock11: <code>:clock11:</code></td><td>:clock1130: <code>:clock1130:</code></td><td>:clock12: <code>:clock12:</code></td></tr><tr><td>:clock1230: <code>:clock1230:</code></td><td>:clock2: <code>:clock2:</code></td><td>:clock230: <code>:clock230:</code></td></tr><tr><td>:clock3: <code>:clock3:</code></td><td>:clock330: <code>:clock330:</code></td><td>:clock4: <code>:clock4:</code></td></tr><tr><td>:clock430: <code>:clock430:</code></td><td>:clock5: <code>:clock5:</code></td><td>:clock530: <code>:clock530:</code></td></tr><tr><td>:clock6: <code>:clock6:</code></td><td>:clock630: <code>:clock630:</code></td><td>:clock7: <code>:clock7:</code></td></tr><tr><td>:clock730: <code>:clock730:</code></td><td>:clock8: <code>:clock8:</code></td><td>:clock830: <code>:clock830:</code></td></tr><tr><td>:clock9: <code>:clock9:</code></td><td>:clock930: <code>:clock930:</code></td><td>:heavy_dollar_sign: <code>:heavy_dollar_sign:</code></td></tr><tr><td>:copyright: <code>:copyright:</code></td><td>:registered: <code>:registered:</code></td><td>:tm: <code>:tm:</code></td></tr><tr><td>:x: <code>:x:</code></td><td>:heavy_exclamation_mark: <code>:heavy_exclamation_mark:</code></td><td>:bangbang: <code>:bangbang:</code></td></tr><tr><td>:interrobang: <code>:interrobang:</code></td><td>:o: <code>:o:</code></td><td>:heavy_multiplication_x: <code>:heavy_multiplication_x:</code></td></tr><tr><td>:heavy_plus_sign: <code>:heavy_plus_sign:</code></td><td>:heavy_minus_sign: <code>:heavy_minus_sign:</code></td><td>:heavy_division_sign: <code>:heavy_division_sign:</code></td></tr><tr><td>:white_flower: <code>:white_flower:</code></td><td>:100: <code>:100:</code></td><td>:heavy_check_mark: <code>:heavy_check_mark:</code></td></tr><tr><td>:ballot_box_with_check: <code>:ballot_box_with_check:</code></td><td>:radio_button: <code>:radio_button:</code></td><td>:link: <code>:link:</code></td></tr><tr><td>:curly_loop: <code>:curly_loop:</code></td><td>:wavy_dash: <code>:wavy_dash:</code></td><td>:part_alternation_mark: <code>:part_alternation_mark:</code></td></tr><tr><td>:trident: <code>:trident:</code></td><td>:black_square: <code>:black_square:</code></td><td>:white_square: <code>:white_square:</code></td></tr><tr><td>:white_check_mark: <code>:white_check_mark:</code></td><td>:black_square_button: <code>:black_square_button:</code></td><td>:white_square_button: <code>:white_square_button:</code></td></tr><tr><td>:black_circle: <code>:black_circle:</code></td><td>:white_circle: <code>:white_circle:</code></td><td>:red_circle: <code>:red_circle:</code></td></tr><tr><td>:large_blue_circle: <code>:large_blue_circle:</code></td><td>:large_blue_diamond: <code>:large_blue_diamond:</code></td><td>:large_orange_diamond: <code>:large_orange_diamond:</code></td></tr><tr><td>:small_blue_diamond: <code>:small_blue_diamond:</code></td><td>:small_orange_diamond: <code>:small_orange_diamond:</code></td><td>:small_red_triangle: <code>:small_red_triangle:</code></td></tr><tr><td>:small_red_triangle_down: <code>:small_red_triangle_down:</code></td><td>:shipit: <code>:shipit:</code></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown语法学习&quot;&gt;&lt;a href=&quot;#Markdown语法学习&quot; class=&quot;headerlink&quot; title=&quot;Markdown语法学习&quot;&gt;&lt;/a&gt;Markdown语法学习&lt;/h1&gt;&lt;p&gt;本篇博客参照了&lt;a href=&quot;https://markdo</summary>
      
    
    
    
    
    <category term="Markdown" scheme="https://github.com/Elbenhorn/Elbenhorn.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/Elbenhorn/Elbenhorn.github.io/2021/01/21/hello-world/"/>
    <id>https://github.com/Elbenhorn/Elbenhorn.github.io/2021/01/21/hello-world/</id>
    <published>2021-01-21T04:05:22.076Z</published>
    <updated>2021-01-21T04:05:22.076Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
